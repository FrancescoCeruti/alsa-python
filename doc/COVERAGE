
*******************************
PYALSA/ASOUNDLIB COVERAGE/USAGE
*******************************


Notes:
* For re-generating this file, you need inet access (for downloading the
  doxygen HTML from www.alsa-project.org site).
* Some cached information about parsing is in the 'cache' directory:
  * If you change a source file, the program will regenerate the cache.
  * HTML API from www.alsa-project.org is never refreshed, remove manually.
* Doxygen Modules are underlined by ======= .
* Doxygen Sections are Underlined by ------- . The parsed sections are:
  * CPP #defines
  * Type definitions
  * Enumerations
  * Functions
* The first line of each item is the "C Prototype". First 3 columns are:
  * Number of times found in checked code
  * N/A if the item is not being used/was not found
  * EXC if the item is excluded (will not be used/implemented)
* The next line is the one-liner documentation.
* Following lines are usage/definition until next item.
* There are lines that summaries the coverage, they start with '^STAT'.




Global defines and functions
============================



Typedefs
--------
N/A typedef void(*) snd_async_callback_t(snd_async_handler_t *handler)
        Async notification callback.
          **** NOT AVAILABLE/USED snd_async_callback_t ****
N/A typedef struct _snd_async_handler snd_async_handler_t
        Internal structure for an async notification client handler.
          **** NOT AVAILABLE/USED snd_async_handler_t ****
N/A typedef struct timespec snd_htimestamp_t
        Hi-res timestamp
          **** NOT AVAILABLE/USED snd_htimestamp_t ****
N/A typedef struct timeval snd_timestamp_t
        Timestamp
          **** NOT AVAILABLE/USED snd_timestamp_t ****
STAT Global defines and functions   Typedefs    :   4 missing (100%)   0 excluded (  0%) of   4 total (  0% covered).



Functions
---------
1   const char* snd_asoundlib_version ( void )
        Returns the ALSA sound library version in ASCII format.
          => Used in    :     alsacard.c: asoundlib_version
N/A int snd_async_add_handler ( snd_async_handler_t ** handler,int fd,snd_async_callback_t callback,void * private_data)
        Registers an async handler.
          **** NOT AVAILABLE/USED snd_async_add_handler ****
N/A int snd_async_del_handler ( snd_async_handler_t * handler )
        Deletes an async handler.
          **** NOT AVAILABLE/USED snd_async_del_handler ****
N/A void* snd_async_handler_get_callback_private ( snd_async_handler_t * handler )
        Returns the private data assigned to an async handler.
          **** NOT AVAILABLE/USED snd_async_handler_get_callback_private ****
N/A int snd_async_handler_get_fd ( snd_async_handler_t * handler )
        Returns the file descriptor assigned to an async handler.
          **** NOT AVAILABLE/USED snd_async_handler_get_fd ****
N/A int snd_async_handler_get_signo ( snd_async_handler_t * handler )
        Returns the signal number assigned to an async handler.
          **** NOT AVAILABLE/USED snd_async_handler_get_signo ****
N/A int snd_dlclose ( void * handle )
        Closes a dynamic library - ALSA wrapper for dlclose.
          **** NOT AVAILABLE/USED snd_dlclose ****
N/A void* snd_dlopen ( const char * name,int mode)
        Opens a dynamic library - ALSA wrapper for dlopen.
          **** NOT AVAILABLE/USED snd_dlopen ****
N/A void* snd_dlsym ( void * handle,const char * name,const char * version)
        Resolves a symbol from a dynamic library - ALSA wrapper for dlsym.
          **** NOT AVAILABLE/USED snd_dlsym ****
N/A struct snd_shm_area* snd_shm_area_create ( int shmid,void * ptr)
        Create a shm area record.
          **** NOT AVAILABLE/USED snd_shm_area_create ****
N/A int snd_shm_area_destroy ( struct snd_shm_area * area )
        Release the shared area record.
          **** NOT AVAILABLE/USED snd_shm_area_destroy ****
N/A struct snd_shm_area* snd_shm_area_share ( struct snd_shm_area * area )
        Increase the reference counter of shm area record.
          **** NOT AVAILABLE/USED snd_shm_area_share ****
N/A int snd_user_file ( const char * file,char ** result)
        Get the full file name.
          **** NOT AVAILABLE/USED snd_user_file ****
STAT Global defines and functions   Functions   :  12 missing ( 92%)   0 excluded (  0%) of  13 total (  8% covered).



STAT Global defines and functions   SUMMARY     :  16 missing ( 94%)   0 excluded (  0%) of  17 total (  6% covered).





Error handling
==============



Defines
-------
N/A #define SND_ERROR_ALISP_NIL (SND_ERROR_BEGIN+1)
        Lisp encountered an error during acall.
          **** NOT AVAILABLE/USED SND_ERROR_ALISP_NIL ****
N/A #define SND_ERROR_BEGIN 500000
        Lower boundary of sound error codes.
          **** NOT AVAILABLE/USED SND_ERROR_BEGIN ****
N/A #define SND_ERROR_INCOMPATIBLE_VERSION (SND_ERROR_BEGIN+0)
        Kernel/library protocols are not compatible.
          **** NOT AVAILABLE/USED SND_ERROR_INCOMPATIBLE_VERSION ****
N/A #define SNDERR ( args... ) snd_lib_error(__FILE__, __LINE__, __FUNCTION__, 0, ##args)
        Shows a sound error message.
          **** NOT AVAILABLE/USED SNDERR ****
N/A #define SYSERR ( args... ) snd_lib_error(__FILE__, __LINE__, __FUNCTION__, errno, ##args)
        Shows a system error message (related to errno).
          **** NOT AVAILABLE/USED SYSERR ****
STAT Error handling                 Defines     :   5 missing (100%)   0 excluded (  0%) of   5 total (  0% covered).



Typedefs
--------
N/A typedef void(*) snd_lib_error_handler_t(const char *file, int line, const char *function, int err,const char *fmt,...)
        Error handler callback.
          **** NOT AVAILABLE/USED snd_lib_error_handler_t ****
STAT Error handling                 Typedefs    :   1 missing (100%)   0 excluded (  0%) of   1 total (  0% covered).



Functions
---------
N/A int snd_lib_error_set_handler ( snd_lib_error_handler_t handler )
        Sets the error handler.
          **** NOT AVAILABLE/USED snd_lib_error_set_handler ****
30  const char* snd_strerror ( int errnum )
        Returns the message for an error code.
          => Used in    :      alsaseq.c: RAISESND
          => Used in    :    alsamixer.c: pyalsamixer_attach
          => Used in    :    alsamixer.c: pyalsamixer_attach
          => Used in    :    alsamixer.c: pyalsamixer_load
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumeall
          => Used in    :    alsamixer.c: pyalsamixerelement_getrange
          => Used in    :    alsamixer.c: pyalsamixerelement_setrange
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchtuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchall
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumedb
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumedb
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumealldb
          => Used in    :    alsamixer.c: pyalsamixerelement_getrangedb
          => Used in    : alsahcontrol.c: simple_id_fcn
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_init
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_read
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_write
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_init
          => Used in    :     alsacard.c: card_list
          => Used in    :     alsacard.c: card_get_name
          => Used in    :     alsacard.c: card_get_longname
N/A snd_lib_error_handler_t snd_lib_error = snd_lib_error_default
        Pointer to the error handler function. For internal use only.
          **** NOT AVAILABLE/USED snd_lib_error_default ****
N/A snd_lib_error_handler_t snd_lib_error
        Pointer to the error handler function. For internal use only.
          **** NOT AVAILABLE/USED snd_lib_error ****
STAT Error handling                 Functions   :   3 missing ( 75%)   0 excluded (  0%) of   4 total ( 25% covered).



STAT Error handling                 SUMMARY     :   9 missing ( 90%)   0 excluded (  0%) of  10 total ( 10% covered).





Control Interface
=================



Defines
-------
N/A #define SND_CONTROL_DLSYM_VERSION _dlsym_control_001
        dlsym version for interface entry callback
          **** NOT AVAILABLE/USED SND_CONTROL_DLSYM_VERSION ****
2   #define SND_CTL_ASYNC
        Async notification (flag for open mode)
          => As constant:  alsacontrol.c: open_mode["ASYNC"]
          => As constant: alsahcontrol.c: open_mode["ASYNC"]
1   #define snd_ctl_card_info_alloca ( ptr )
        allocate an invalid snd_ctl_card_info_t using standard alloca
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
8   #define snd_ctl_elem_id_alloca ( ptr )
        allocate an invalid snd_ctl_elem_id_t using standard alloca
          => Used in    : alsahcontrol.c: simple_id_fcn
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_id
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_id
N/A #define snd_ctl_elem_info_alloca ( ptr )
        allocate an invalid snd_ctl_elem_info_t using standard alloca
          **** NOT AVAILABLE/USED snd_ctl_elem_info_alloca ****
N/A #define snd_ctl_elem_list_alloca ( ptr )
        allocate an invalid snd_ctl_elem_list_t using standard alloca
          **** NOT AVAILABLE/USED snd_ctl_elem_list_alloca ****
N/A #define snd_ctl_elem_value_alloca ( ptr )
        allocate an invalid snd_ctl_elem_value_t using standard alloca
          **** NOT AVAILABLE/USED snd_ctl_elem_value_alloca ****
N/A #define snd_ctl_event_alloca ( ptr )
        allocate an invalid snd_ctl_event_t using standard alloca
          **** NOT AVAILABLE/USED snd_ctl_event_alloca ****
2   #define SND_CTL_EVENT_MASK_ADD
        Element has been added
          => As constant:    alsamixer.c: event_mask["ADD"]
          => As constant: alsahcontrol.c: event_mask["ADD"]
2   #define SND_CTL_EVENT_MASK_INFO
        Element info has been changed
          => As constant:    alsamixer.c: event_mask["INFO"]
          => As constant: alsahcontrol.c: event_mask["INFO"]
2   #define SND_CTL_EVENT_MASK_REMOVE
        Element has been removed (Warning: test this first and if set don't test the other masks)
          => Used in    :    alsamixer.c: add_space3
          => Used in    : alsahcontrol.c: add_space4
2   #define SND_CTL_EVENT_MASK_TLV
        Element's TLV value has been changed
          => As constant:    alsamixer.c: event_mask["TLV"]
          => As constant: alsahcontrol.c: event_mask["TLV"]
2   #define SND_CTL_EVENT_MASK_VALUE
        Element value has been changed
          => As constant:    alsamixer.c: event_mask["VALUE"]
          => As constant: alsahcontrol.c: event_mask["VALUS"]
N/A #define SND_CTL_NAME_CAPTURE "Capture "
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_CAPTURE ****
N/A #define SND_CTL_NAME_IEC958 ( expl,direction,what ) "IEC958 " expl SND_CTL_NAME_##direction SND_CTL_NAME_IEC958_##what
        Element name for IEC958 (S/PDIF)
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958 ****
N/A #define SND_CTL_NAME_IEC958_CON_MASK "Con Mask"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_CON_MASK ****
N/A #define SND_CTL_NAME_IEC958_DEFAULT "Default"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_DEFAULT ****
N/A #define SND_CTL_NAME_IEC958_MASK "Mask"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_MASK ****
N/A #define SND_CTL_NAME_IEC958_NONE ""
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_NONE ****
N/A #define SND_CTL_NAME_IEC958_PCM_STREAM "PCM Stream"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_PCM_STREAM ****
N/A #define SND_CTL_NAME_IEC958_PRO_MASK "Pro Mask"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_PRO_MASK ****
N/A #define SND_CTL_NAME_IEC958_SWITCH "Switch"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_SWITCH ****
N/A #define SND_CTL_NAME_IEC958_VOLUME "Volume"
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_IEC958_VOLUME ****
N/A #define SND_CTL_NAME_NONE ""
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_NONE ****
N/A #define SND_CTL_NAME_PLAYBACK "Playback "
        CTL name helper
          **** NOT AVAILABLE/USED SND_CTL_NAME_PLAYBACK ****
2   #define SND_CTL_NONBLOCK
        Non blocking mode (flag for open mode)
          => As constant:  alsacontrol.c: open_mode["NONBLOCK"]
          => As constant: alsahcontrol.c: open_mode["NONBLOCK"]
N/A #define SND_CTL_POWER_D0 0x0000
        ACPI/PCI Power State D0
          **** NOT AVAILABLE/USED SND_CTL_POWER_D0 ****
N/A #define SND_CTL_POWER_D1 0x0100
        ACPI/PCI Power State D1
          **** NOT AVAILABLE/USED SND_CTL_POWER_D1 ****
N/A #define SND_CTL_POWER_D2 0x0200
        ACPI/PCI Power State D2
          **** NOT AVAILABLE/USED SND_CTL_POWER_D2 ****
N/A #define SND_CTL_POWER_D3 0x0300
        ACPI/PCI Power State D3
          **** NOT AVAILABLE/USED SND_CTL_POWER_D3 ****
N/A #define SND_CTL_POWER_D3cold (SND_CTL_POWER_D3|0x0001)
        ACPI/PCI Power State D3cold
          **** NOT AVAILABLE/USED SND_CTL_POWER_D3cold ****
N/A #define SND_CTL_POWER_D3hot (SND_CTL_POWER_D3|0x0000)
        ACPI/PCI Power State D3hot
          **** NOT AVAILABLE/USED SND_CTL_POWER_D3hot ****
N/A #define SND_CTL_POWER_MASK 0xff00
        Mask for the major Power State identifier
          **** NOT AVAILABLE/USED SND_CTL_POWER_MASK ****
2   #define SND_CTL_READONLY
        Read only (flag for open mode)
          => As constant:  alsacontrol.c: open_mode["READONLY"]
          => As constant: alsahcontrol.c: open_mode["READONLY"]
N/A #define SND_CTL_TLV_DB_GAIN_MUTE -9999999
        Mute state
          **** NOT AVAILABLE/USED SND_CTL_TLV_DB_GAIN_MUTE ****
N/A #define SND_CTL_TLVT_CONTAINER 0x0000
        TLV type - Container
          **** NOT AVAILABLE/USED SND_CTL_TLVT_CONTAINER ****
N/A #define SND_CTL_TLVT_DB_LINEAR 0x0002
        TLV type - linear volume
          **** NOT AVAILABLE/USED SND_CTL_TLVT_DB_LINEAR ****
N/A #define SND_CTL_TLVT_DB_RANGE 0x0003
        TLV type - dB range container
          **** NOT AVAILABLE/USED SND_CTL_TLVT_DB_RANGE ****
N/A #define SND_CTL_TLVT_DB_SCALE 0x0001
        TLV type - basic dB scale
          **** NOT AVAILABLE/USED SND_CTL_TLVT_DB_SCALE ****
N/A #define SND_SCTL_NOFREE 0x0001
        Don't destroy the ctl handle when close
          **** NOT AVAILABLE/USED SND_SCTL_NOFREE ****
STAT Control Interface              Defines     :  30 missing ( 75%)   0 excluded (  0%) of  40 total ( 25% covered).



Typedefs
--------
2   typedef struct snd_aes_iec958 snd_aes_iec958_t
        IEC958 structure
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
1   typedef struct _snd_ctl_card_info snd_ctl_card_info_t
        CTL card info container
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
10  typedef struct _snd_ctl_elem_id snd_ctl_elem_id_t
        CTL element identifier container
          => Used in    : alsahcontrol.c: id_to_python
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: simple_id_fcn
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_id
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_id
N/A typedef enum _snd_ctl_elem_iface snd_ctl_elem_iface_t
        CTL related interface
          **** NOT AVAILABLE/USED snd_ctl_elem_iface_t ****
1   typedef struct _snd_ctl_elem_info snd_ctl_elem_info_t
        CTL element info container
          => Used in    : alsahcontrol.c: PYHCTLINFO
N/A typedef struct _snd_ctl_elem_list snd_ctl_elem_list_t
        CTL element identifier list container
          **** NOT AVAILABLE/USED snd_ctl_elem_list_t ****
1   typedef enum _snd_ctl_elem_type snd_ctl_elem_type_t
        CTL element type
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
1   typedef struct _snd_ctl_elem_value snd_ctl_elem_value_t
        CTL element value container
          => Used in    : alsahcontrol.c: PYHCTLVALUE
N/A typedef struct _snd_ctl_event snd_ctl_event_t
        CTL event container
          **** NOT AVAILABLE/USED snd_ctl_event_t ****
N/A typedef enum _snd_ctl_event_type snd_ctl_event_type_t
        Event class
          **** NOT AVAILABLE/USED snd_ctl_event_type_t ****
3   typedef struct _snd_ctl snd_ctl_t
        CTL handle
          => Used in    :  alsacontrol.c: PYCTL
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
N/A typedef enum _snd_ctl_type snd_ctl_type_t
        CTL type
          **** NOT AVAILABLE/USED snd_ctl_type_t ****
N/A typedef struct _snd_sctl snd_sctl_t
        SCTL type
          **** NOT AVAILABLE/USED snd_sctl_t ****
STAT Control Interface              Typedefs    :   6 missing ( 46%)   0 excluded (  0%) of  13 total ( 54% covered).



Enumerations
------------
enum _snd_ctl_elem_iface
2   SND_CTL_ELEM_IFACE_CARD
        Card level
          => As constant:  alsacontrol.c: interface_id["CARD"]
          => As constant: alsahcontrol.c: interface_id["CARD"]
2   SND_CTL_ELEM_IFACE_HWDEP
        Hardware dependent device
          => As constant:  alsacontrol.c: interface_id["HWDEP"]
          => As constant: alsahcontrol.c: interface_id["HWDEP"]
2   SND_CTL_ELEM_IFACE_MIXER
        Mixer
          => As constant:  alsacontrol.c: interface_id["MIXER"]
          => As constant: alsahcontrol.c: interface_id["MIXER"]
2   SND_CTL_ELEM_IFACE_PCM
        PCM
          => As constant:  alsacontrol.c: interface_id["PCM"]
          => As constant: alsahcontrol.c: interface_id["PCM"]
2   SND_CTL_ELEM_IFACE_RAWMIDI
        RawMidi
          => As constant:  alsacontrol.c: interface_id["RAWMIDI"]
          => As constant: alsahcontrol.c: interface_id["RAWMIDI"]
2   SND_CTL_ELEM_IFACE_TIMER
        Timer
          => As constant:  alsacontrol.c: interface_id["TIMER"]
          => As constant: alsahcontrol.c: interface_id["TIMER"]
2   SND_CTL_ELEM_IFACE_SEQUENCER
        Sequencer
          => As constant:  alsacontrol.c: interface_id["SEQUENCER"]
          => As constant: alsahcontrol.c: interface_id["SEQUENCER"]
enum _snd_ctl_elem_type
1   SND_CTL_ELEM_TYPE_NONE
        Invalid type
          => As constant: alsahcontrol.c: element_type["NONE"]
5   SND_CTL_ELEM_TYPE_BOOLEAN
        Boolean contents
          => As constant: alsahcontrol.c: element_type["BOOLEAN"]
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
6   SND_CTL_ELEM_TYPE_INTEGER
        Integer contents
          => As constant: alsahcontrol.c: element_type["INTEGER"]
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_long
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
5   SND_CTL_ELEM_TYPE_ENUMERATED
        Enumerated contents
          => As constant: alsahcontrol.c: element_type["ENUMERATED"]
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_getitems
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
3   SND_CTL_ELEM_TYPE_BYTES
        Bytes contents
          => As constant: alsahcontrol.c: element_type["BYTES"]
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
6   SND_CTL_ELEM_TYPE_IEC958
        IEC958 (S/PDIF) setting content
          => As constant: alsahcontrol.c: element_type["IEC958"]
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
6   SND_CTL_ELEM_TYPE_INTEGER64
        64-bit integer contents
          => As constant: alsahcontrol.c: element_type["INTEGER64"]
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_longlong
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
enum _snd_ctl_event_type
1   SND_CTL_EVENT_ELEM
        Elements related event
          => As constant: alsahcontrol.c: event_class["ELEMENT"]
enum _snd_ctl_type
N/A SND_CTL_TYPE_HW
        Kernel level CTL
          **** NOT AVAILABLE/USED SND_CTL_TYPE_HW ****
N/A SND_CTL_TYPE_SHM
        Shared memory client CTL
          **** NOT AVAILABLE/USED SND_CTL_TYPE_SHM ****
N/A SND_CTL_TYPE_INET
        INET client CTL (not yet implemented)
          **** NOT AVAILABLE/USED SND_CTL_TYPE_INET ****
N/A SND_CTL_TYPE_EXT
        External control plugin
          **** NOT AVAILABLE/USED SND_CTL_TYPE_EXT ****
STAT Control Interface              Enumerations:   4 missing ( 21%)   0 excluded (  0%) of  19 total ( 79% covered).



Functions
---------
N/A int snd_async_add_ctl_handler ( snd_async_handler_t ** handler,snd_ctl_t * ctl,snd_async_callback_t callback,void * private_data)
        Add an async handler for a CTL.
          **** NOT AVAILABLE/USED snd_async_add_ctl_handler ****
N/A snd_ctl_t* snd_async_handler_get_ctl ( snd_async_handler_t * handler )
        Return CTL handle related to an async handler.
          **** NOT AVAILABLE/USED snd_async_handler_get_ctl ****
1   int snd_card_get_index ( const char * string )
        Convert card string to an integer value.
          => Used in    :     alsacard.c: card_get_index
1   int snd_card_get_longname ( int card,char ** name)
        Obtain the card long name.
          => Used in    :     alsacard.c: card_get_longname
1   int snd_card_get_name ( int card,char ** name)
        Obtain the card name.
          => Used in    :     alsacard.c: card_get_name
1   int snd_card_load ( int card )
        Try to load the driver for a card.
          => Used in    :     alsacard.c: card_load
1   int snd_card_next ( int * rcard )
        Try to determine the next card.
          => Used in    :     alsacard.c: card_list
1   int snd_ctl_card_info ( snd_ctl_t * ctl,snd_ctl_card_info_t * info)
        Get card related information.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
N/A void snd_ctl_card_info_clear ( snd_ctl_card_info_t * obj )
        clear given snd_ctl_card_info_t object
          **** NOT AVAILABLE/USED snd_ctl_card_info_clear ****
N/A void snd_ctl_card_info_copy ( snd_ctl_card_info_t * dst,const snd_ctl_card_info_t * src)
        copy one snd_ctl_card_info_t to another
          **** NOT AVAILABLE/USED snd_ctl_card_info_copy ****
N/A void snd_ctl_card_info_free ( snd_ctl_card_info_t * obj )
        frees a previously allocated snd_ctl_card_info_t
          **** NOT AVAILABLE/USED snd_ctl_card_info_free ****
1   int snd_ctl_card_info_get_card ( const snd_ctl_card_info_t * obj )
        Get card number from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
1   const char* snd_ctl_card_info_get_components ( const snd_ctl_card_info_t * obj )
        Get card component list from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
2   const char* snd_ctl_card_info_get_driver ( const snd_ctl_card_info_t * obj )
        Get card driver name from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
1   const char* snd_ctl_card_info_get_id ( const snd_ctl_card_info_t * obj )
        Get card identifier from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
1   const char* snd_ctl_card_info_get_longname ( const snd_ctl_card_info_t * obj )
        Get card long name from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
1   const char* snd_ctl_card_info_get_mixername ( const snd_ctl_card_info_t * obj )
        Get card mixer name from a CTL card info.
          => Used in    :  alsacontrol.c: pyalsacontrol_cardinfo
N/A const char* snd_ctl_card_info_get_name ( const snd_ctl_card_info_t * obj )
        Get card name from a CTL card info.
          **** NOT AVAILABLE/USED snd_ctl_card_info_get_name ****
N/A int snd_ctl_card_info_malloc ( snd_ctl_card_info_t ** ptr )
        allocate an invalid snd_ctl_card_info_t using standard malloc
          **** NOT AVAILABLE/USED snd_ctl_card_info_malloc ****
N/A size_t snd_ctl_card_info_sizeof ( void )
        get size of snd_ctl_card_info_t
          **** NOT AVAILABLE/USED snd_ctl_card_info_sizeof ****
1   int snd_ctl_close ( snd_ctl_t * ctl )
        close CTL handle
          => Used in    :  alsacontrol.c: pyalsacontrol_dealloc
N/A int snd_ctl_convert_from_dB ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,long db_gain,long * value,int xdir)
        Convert from dB gain to the raw volume value on the given control element.
          **** NOT AVAILABLE/USED snd_ctl_convert_from_dB ****
N/A int snd_ctl_convert_to_dB ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,long volume,long * db_gain)
        Convert the volume value to dB on the given control element.
          **** NOT AVAILABLE/USED snd_ctl_convert_to_dB ****
1   int snd_ctl_elem_add_boolean ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,unsigned int count)
        Create and add an user BOOLEAN CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
1   int snd_ctl_elem_add_iec958 ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id)
        Create and add an user IEC958 CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
1   int snd_ctl_elem_add_integer ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,unsigned int count,long min,long max,long step)
        Create and add an user INTEGER CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
1   int snd_ctl_elem_add_integer64 ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,unsigned int count,long long min,long long max,long long step)
        Create and add an user INTEGER64 CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
N/A void snd_ctl_elem_id_clear ( snd_ctl_elem_id_t * obj )
        clear given snd_ctl_elem_id_t object
          **** NOT AVAILABLE/USED snd_ctl_elem_id_clear ****
N/A void snd_ctl_elem_id_copy ( snd_ctl_elem_id_t * dst,const snd_ctl_elem_id_t * src)
        copy one snd_ctl_elem_id_t to another
          **** NOT AVAILABLE/USED snd_ctl_elem_id_copy ****
N/A void snd_ctl_elem_id_free ( snd_ctl_elem_id_t * obj )
        frees a previously allocated snd_ctl_elem_id_t
          **** NOT AVAILABLE/USED snd_ctl_elem_id_free ****
1   unsigned int snd_ctl_elem_id_get_device ( const snd_ctl_elem_id_t * obj )
        Get device part of a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
1   unsigned int snd_ctl_elem_id_get_index ( const snd_ctl_elem_id_t * obj )
        Get index part of a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
1   snd_ctl_elem_iface_t snd_ctl_elem_id_get_interface ( const snd_ctl_elem_id_t * obj )
        Get interface part of a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
1   const char* snd_ctl_elem_id_get_name ( const snd_ctl_elem_id_t * obj )
        Get name part of a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
1   unsigned int snd_ctl_elem_id_get_numid ( const snd_ctl_elem_id_t * obj )
        Get numeric identifier from a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
1   unsigned int snd_ctl_elem_id_get_subdevice ( const snd_ctl_elem_id_t * obj )
        Get subdevice part of a CTL element identifier.
          => Used in    : alsahcontrol.c: id_to_python
N/A int snd_ctl_elem_id_malloc ( snd_ctl_elem_id_t ** ptr )
        allocate an invalid snd_ctl_elem_id_t using standard malloc
          **** NOT AVAILABLE/USED snd_ctl_elem_id_malloc ****
2   void snd_ctl_elem_id_set_device ( snd_ctl_elem_id_t * obj,unsigned int val)
        Set device part for a CTL element identifier.
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
2   void snd_ctl_elem_id_set_index ( snd_ctl_elem_id_t * obj,unsigned int val)
        Set index part for a CTL element identifier.
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
2   void snd_ctl_elem_id_set_interface ( snd_ctl_elem_id_t * obj,snd_ctl_elem_iface_t val)
        Set interface part for a CTL element identifier.
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
2   void snd_ctl_elem_id_set_name ( snd_ctl_elem_id_t * obj,const char * val)
        Set name part for a CTL element identifier.
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
1   void snd_ctl_elem_id_set_numid ( snd_ctl_elem_id_t * obj,unsigned int val)
        Set numeric identifier for a CTL element identifier.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
2   void snd_ctl_elem_id_set_subdevice ( snd_ctl_elem_id_t * obj,unsigned int val)
        Set subdevice part for a CTL element identifier.
          => Used in    : alsahcontrol.c: parse_id
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
N/A size_t snd_ctl_elem_id_sizeof ( void )
        get size of snd_ctl_elem_id_t
          **** NOT AVAILABLE/USED snd_ctl_elem_id_sizeof ****
2   const char* snd_ctl_elem_iface_name ( snd_ctl_elem_iface_t iface )
        get name of a CTL element related interface
          => Used in    :  alsacontrol.c: add_space1
          => Used in    : alsahcontrol.c: add_space1
N/A int snd_ctl_elem_info ( snd_ctl_t * ctl,snd_ctl_elem_info_t * info)
        Get CTL element information.
          **** NOT AVAILABLE/USED snd_ctl_elem_info ****
N/A void snd_ctl_elem_info_clear ( snd_ctl_elem_info_t * obj )
        clear given snd_ctl_elem_info_t object
          **** NOT AVAILABLE/USED snd_ctl_elem_info_clear ****
N/A void snd_ctl_elem_info_copy ( snd_ctl_elem_info_t * dst,const snd_ctl_elem_info_t * src)
        copy one snd_ctl_elem_info_t to another
          **** NOT AVAILABLE/USED snd_ctl_elem_info_copy ****
1   void snd_ctl_elem_info_free ( snd_ctl_elem_info_t * obj )
        frees a previously allocated snd_ctl_elem_info_t
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   unsigned int snd_ctl_elem_info_get_count ( const snd_ctl_elem_info_t * obj )
        Get number of value entries from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   unsigned int snd_ctl_elem_info_get_device ( const snd_ctl_elem_info_t * obj )
        Get device part of CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_get_dimension ( const snd_ctl_elem_info_t * obj,unsigned int idx)
        Get specified of dimension width for given element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dimensions
1   int snd_ctl_elem_info_get_dimensions ( const snd_ctl_elem_info_t * obj )
        Get count of dimensions for given element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dimensions
2   void snd_ctl_elem_info_get_id ( const snd_ctl_elem_info_t * obj,snd_ctl_elem_id_t * ptr)
        Get CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_id
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   unsigned int snd_ctl_elem_info_get_index ( const snd_ctl_elem_info_t * obj )
        Get index part of CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   snd_ctl_elem_iface_t snd_ctl_elem_info_get_interface ( const snd_ctl_elem_info_t * obj )
        Get interface part of CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   const char* snd_ctl_elem_info_get_item_name ( const snd_ctl_elem_info_t * obj )
        Get name for selected item in a SND_CTL_ELEM_TYPE_ENUMERATED CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
2   unsigned int snd_ctl_elem_info_get_items ( const snd_ctl_elem_info_t * obj )
        Get number of items available from a SND_CTL_ELEM_TYPE_ENUMERATED CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_getitems
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
1   long snd_ctl_elem_info_get_max ( const snd_ctl_elem_info_t * obj )
        Get maximum value from a SND_CTL_ELEM_TYPE_INTEGER CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   long long snd_ctl_elem_info_get_max64 ( const snd_ctl_elem_info_t * obj )
        Get maximum value from a SND_CTL_ELEM_TYPE_INTEGER64 CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   long snd_ctl_elem_info_get_min ( const snd_ctl_elem_info_t * obj )
        Get minimum value from a SND_CTL_ELEM_TYPE_INTEGER CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   long long snd_ctl_elem_info_get_min64 ( const snd_ctl_elem_info_t * obj )
        Get minimum value from a SND_CTL_ELEM_TYPE_INTEGER64 CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   const char* snd_ctl_elem_info_get_name ( const snd_ctl_elem_info_t * obj )
        Get name part of CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   unsigned int snd_ctl_elem_info_get_numid ( const snd_ctl_elem_info_t * obj )
        Get element numeric identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   pid_t snd_ctl_elem_info_get_owner ( const snd_ctl_elem_info_t * obj )
        Get owner of a locked element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_getowner
1   long snd_ctl_elem_info_get_step ( const snd_ctl_elem_info_t * obj )
        Get value step from a SND_CTL_ELEM_TYPE_INTEGER CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   long long snd_ctl_elem_info_get_step64 ( const snd_ctl_elem_info_t * obj )
        Get value step from a SND_CTL_ELEM_TYPE_INTEGER64 CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   unsigned int snd_ctl_elem_info_get_subdevice ( const snd_ctl_elem_info_t * obj )
        Get subdevice part of CTL element identifier of a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
5   snd_ctl_elem_type_t snd_ctl_elem_info_get_type ( const snd_ctl_elem_info_t * obj )
        Get type from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_getitems
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_long
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_longlong
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_inactive ( const snd_ctl_elem_info_t * obj )
        Get info about status from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_locked ( const snd_ctl_elem_info_t * obj )
        Get info whether an element is locked.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_owner ( const snd_ctl_elem_info_t * obj )
        Get info if I own an element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_readable ( const snd_ctl_elem_info_t * obj )
        Get info about readability from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_tlv_commandable ( const snd_ctl_elem_info_t * obj )
        Get info about TLV command possibility from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_tlv_readable ( const snd_ctl_elem_info_t * obj )
        Get info about TLV readability from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_tlv_writable ( const snd_ctl_elem_info_t * obj )
        Get info about TLV writeability from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_user ( const snd_ctl_elem_info_t * obj )
        Get info if it's a user element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_volatile ( const snd_ctl_elem_info_t * obj )
        Get info about notification feasibility from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_is_writable ( const snd_ctl_elem_info_t * obj )
        Get info about writability from a CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_dealloc
1   int snd_ctl_elem_info_malloc ( snd_ctl_elem_info_t ** ptr )
        allocate an invalid snd_ctl_elem_info_t using standard malloc
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_init
N/A void snd_ctl_elem_info_set_device ( snd_ctl_elem_info_t * obj,unsigned int val)
        Set device part of CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_device ****
N/A void snd_ctl_elem_info_set_id ( snd_ctl_elem_info_t * obj,const snd_ctl_elem_id_t * ptr)
        Set CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_id ****
N/A void snd_ctl_elem_info_set_index ( snd_ctl_elem_info_t * obj,unsigned int val)
        Set index part of CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_index ****
N/A void snd_ctl_elem_info_set_interface ( snd_ctl_elem_info_t * obj,snd_ctl_elem_iface_t val)
        Set interface part of CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_interface ****
1   void snd_ctl_elem_info_set_item ( snd_ctl_elem_info_t * obj,unsigned int val)
        Select item in a SND_CTL_ELEM_TYPE_ENUMERATED CTL element id/info.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
N/A void snd_ctl_elem_info_set_name ( snd_ctl_elem_info_t * obj,const char * val)
        Set name part of CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_name ****
N/A void snd_ctl_elem_info_set_numid ( snd_ctl_elem_info_t * obj,unsigned int val)
        Set element numeric identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_numid ****
N/A void snd_ctl_elem_info_set_subdevice ( snd_ctl_elem_info_t * obj,unsigned int val)
        Set subdevice part of CTL element identifier of a CTL element id/info.
          **** NOT AVAILABLE/USED snd_ctl_elem_info_set_subdevice ****
N/A size_t snd_ctl_elem_info_sizeof ( void )
        get size of snd_ctl_elem_info_t
          **** NOT AVAILABLE/USED snd_ctl_elem_info_sizeof ****
N/A int snd_ctl_elem_list ( snd_ctl_t * ctl,snd_ctl_elem_list_t * list)
        Get a list of element identifiers.
          **** NOT AVAILABLE/USED snd_ctl_elem_list ****
N/A int snd_ctl_elem_list_alloc_space ( snd_ctl_elem_list_t * obj,unsigned int entries)
        allocate space for CTL element identifiers list
          **** NOT AVAILABLE/USED snd_ctl_elem_list_alloc_space ****
N/A void snd_ctl_elem_list_clear ( snd_ctl_elem_list_t * obj )
        clear given snd_ctl_elem_list_t object
          **** NOT AVAILABLE/USED snd_ctl_elem_list_clear ****
N/A void snd_ctl_elem_list_copy ( snd_ctl_elem_list_t * dst,const snd_ctl_elem_list_t * src)
        copy one snd_ctl_elem_list_t to another
          **** NOT AVAILABLE/USED snd_ctl_elem_list_copy ****
N/A void snd_ctl_elem_list_free ( snd_ctl_elem_list_t * obj )
        frees a previously allocated snd_ctl_elem_list_t
          **** NOT AVAILABLE/USED snd_ctl_elem_list_free ****
N/A void snd_ctl_elem_list_free_space ( snd_ctl_elem_list_t * obj )
        free previously allocated space for CTL element identifiers list
          **** NOT AVAILABLE/USED snd_ctl_elem_list_free_space ****
N/A unsigned int snd_ctl_elem_list_get_count ( const snd_ctl_elem_list_t * obj )
        Get total count of elements present in CTL device (information present in every filled CTL element
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_count ****
N/A unsigned int snd_ctl_elem_list_get_device ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get device part of CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_device ****
N/A void snd_ctl_elem_list_get_id ( const snd_ctl_elem_list_t * obj,unsigned int idx,snd_ctl_elem_id_t * ptr)
        Get CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_id ****
N/A unsigned int snd_ctl_elem_list_get_index ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get index part of CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_index ****
N/A snd_ctl_elem_iface_t snd_ctl_elem_list_get_interface ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get interface part of CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_interface ****
N/A const char* snd_ctl_elem_list_get_name ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get name part of CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_name ****
N/A unsigned int snd_ctl_elem_list_get_numid ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get CTL element numeric identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_numid ****
N/A unsigned int snd_ctl_elem_list_get_subdevice ( const snd_ctl_elem_list_t * obj,unsigned int idx)
        Get subdevice part of CTL element identifier for an entry of a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_subdevice ****
N/A unsigned int snd_ctl_elem_list_get_used ( const snd_ctl_elem_list_t * obj )
        Get number of used entries in CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_get_used ****
N/A int snd_ctl_elem_list_malloc ( snd_ctl_elem_list_t ** ptr )
        allocate an invalid snd_ctl_elem_list_t using standard malloc
          **** NOT AVAILABLE/USED snd_ctl_elem_list_malloc ****
N/A void snd_ctl_elem_list_set_offset ( snd_ctl_elem_list_t * obj,unsigned int val)
        Set index of first wanted CTL element identifier in a CTL element identifiers list.
          **** NOT AVAILABLE/USED snd_ctl_elem_list_set_offset ****
N/A size_t snd_ctl_elem_list_sizeof ( void )
        get size of snd_ctl_elem_list_t
          **** NOT AVAILABLE/USED snd_ctl_elem_list_sizeof ****
2   int snd_ctl_elem_lock ( snd_ctl_t * ctl,snd_ctl_elem_id_t * id)
        Lock CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementlock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
N/A int snd_ctl_elem_read ( snd_ctl_t * ctl,snd_ctl_elem_value_t * control)
        Get CTL element value.
          **** NOT AVAILABLE/USED snd_ctl_elem_read ****
1   int snd_ctl_elem_remove ( snd_ctl_t * ctl,snd_ctl_elem_id_t * id)
        Remove an user CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementremove
N/A void snd_ctl_elem_set_bytes ( snd_ctl_elem_value_t * obj,void * data,size_t size)
        Set CTL element SND_CTL_ELEM_TYPE_BYTES value.
          **** NOT AVAILABLE/USED snd_ctl_elem_set_bytes ****
N/A int snd_ctl_elem_tlv_command ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,const unsigned int * tlv)
        Process CTL element TLV command.
          **** NOT AVAILABLE/USED snd_ctl_elem_tlv_command ****
N/A int snd_ctl_elem_tlv_read ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,unsigned int * tlv,unsigned int tlv_size)
        Get CTL element TLV value.
          **** NOT AVAILABLE/USED snd_ctl_elem_tlv_read ****
N/A int snd_ctl_elem_tlv_write ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,const unsigned int * tlv)
        Set CTL element TLV value.
          **** NOT AVAILABLE/USED snd_ctl_elem_tlv_write ****
1   const char* snd_ctl_elem_type_name ( snd_ctl_elem_type_t type )
        get name of a CTL element type
          => Used in    : alsahcontrol.c: add_space2
2   int snd_ctl_elem_unlock ( snd_ctl_t * ctl,snd_ctl_elem_id_t * id)
        Unlock CTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementunlock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
N/A void snd_ctl_elem_value_clear ( snd_ctl_elem_value_t * obj )
        clear given snd_ctl_elem_value_t object
          **** NOT AVAILABLE/USED snd_ctl_elem_value_clear ****
N/A void snd_ctl_elem_value_copy ( snd_ctl_elem_value_t * dst,const snd_ctl_elem_value_t * src)
        copy one snd_ctl_elem_value_t to another
          **** NOT AVAILABLE/USED snd_ctl_elem_value_copy ****
1   void snd_ctl_elem_value_free ( snd_ctl_elem_value_t * obj )
        frees a previously allocated snd_ctl_elem_value_t
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   int snd_ctl_elem_value_get_boolean ( const snd_ctl_elem_value_t * obj,unsigned int idx)
        Get value for an entry of a SND_CTL_ELEM_TYPE_BOOLEAN CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
1   unsigned char snd_ctl_elem_value_get_byte ( const snd_ctl_elem_value_t * obj,unsigned int idx)
        Get value for an entry of a SND_CTL_ELEM_TYPE_BYTES CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
N/A const void* snd_ctl_elem_value_get_bytes ( const snd_ctl_elem_value_t * obj )
        Get value for a SND_CTL_ELEM_TYPE_BYTES CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_get_bytes ****
1   unsigned int snd_ctl_elem_value_get_device ( const snd_ctl_elem_value_t * obj )
        Get device part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   unsigned int snd_ctl_elem_value_get_enumerated ( const snd_ctl_elem_value_t * obj,unsigned int idx)
        Get value for an entry of a SND_CTL_ELEM_TYPE_ENUMERATED CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
2   void snd_ctl_elem_value_get_id ( const snd_ctl_elem_value_t * obj,snd_ctl_elem_id_t * ptr)
        Get CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_id
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   void snd_ctl_elem_value_get_iec958 ( const snd_ctl_elem_value_t * obj,snd_aes_iec958_t * ptr)
        Get value for a SND_CTL_ELEM_TYPE_IEC958 CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
1   unsigned int snd_ctl_elem_value_get_index ( const snd_ctl_elem_value_t * obj )
        Get index part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   long snd_ctl_elem_value_get_integer ( const snd_ctl_elem_value_t * obj,unsigned int idx)
        Get value for an entry of a SND_CTL_ELEM_TYPE_INTEGER CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
1   long long snd_ctl_elem_value_get_integer64 ( const snd_ctl_elem_value_t * obj,unsigned int idx)
        Get value for an entry of a SND_CTL_ELEM_TYPE_INTEGER64 CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_get1
1   snd_ctl_elem_iface_t snd_ctl_elem_value_get_interface ( const snd_ctl_elem_value_t * obj )
        Get interface part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   const char* snd_ctl_elem_value_get_name ( const snd_ctl_elem_value_t * obj )
        Get name part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   unsigned int snd_ctl_elem_value_get_numid ( const snd_ctl_elem_value_t * obj )
        Get element numeric identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   unsigned int snd_ctl_elem_value_get_subdevice ( const snd_ctl_elem_value_t * obj )
        Get subdevice part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_dealloc
1   int snd_ctl_elem_value_malloc ( snd_ctl_elem_value_t ** ptr )
        allocate an invalid snd_ctl_elem_value_t using standard malloc
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_init
1   void snd_ctl_elem_value_set_boolean ( snd_ctl_elem_value_t * obj,unsigned int idx,long val)
        Set value for an entry of a SND_CTL_ELEM_TYPE_BOOLEAN CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
1   void snd_ctl_elem_value_set_byte ( snd_ctl_elem_value_t * obj,unsigned int idx,unsigned char val)
        Set value for an entry of a SND_CTL_ELEM_TYPE_BYTES CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
N/A void snd_ctl_elem_value_set_device ( snd_ctl_elem_value_t * obj,unsigned int val)
        Set device part of CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_device ****
1   void snd_ctl_elem_value_set_enumerated ( snd_ctl_elem_value_t * obj,unsigned int idx,unsigned int val)
        Set value for an entry of a SND_CTL_ELEM_TYPE_ENUMERATED CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
N/A void snd_ctl_elem_value_set_id ( snd_ctl_elem_value_t * obj,const snd_ctl_elem_id_t * ptr)
        Set CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_id ****
N/A void snd_ctl_elem_value_set_iec958 ( snd_ctl_elem_value_t * obj,const snd_aes_iec958_t * ptr)
        Set value for a SND_CTL_ELEM_TYPE_IEC958 CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_iec958 ****
N/A void snd_ctl_elem_value_set_index ( snd_ctl_elem_value_t * obj,unsigned int val)
        Set index part of CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_index ****
1   void snd_ctl_elem_value_set_integer ( snd_ctl_elem_value_t * obj,unsigned int idx,long val)
        Set value for an entry of a SND_CTL_ELEM_TYPE_INTEGER CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
1   void snd_ctl_elem_value_set_integer64 ( snd_ctl_elem_value_t * obj,unsigned int idx,long long val)
        Set value for an entry of a SND_CTL_ELEM_TYPE_INTEGER64 CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_settuple
N/A void snd_ctl_elem_value_set_interface ( snd_ctl_elem_value_t * obj,snd_ctl_elem_iface_t val)
        Set interface part of CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_interface ****
N/A void snd_ctl_elem_value_set_name ( snd_ctl_elem_value_t * obj,const char * val)
        Set name part of CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_name ****
N/A void snd_ctl_elem_value_set_numid ( snd_ctl_elem_value_t * obj,unsigned int val)
        Set element numeric identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_numid ****
N/A void snd_ctl_elem_value_set_subdevice ( snd_ctl_elem_value_t * obj,unsigned int val)
        Set subdevice part of CTL element identifier of a CTL element id/value.
          **** NOT AVAILABLE/USED snd_ctl_elem_value_set_subdevice ****
N/A size_t snd_ctl_elem_value_sizeof ( void )
        get size of snd_ctl_elem_value_t
          **** NOT AVAILABLE/USED snd_ctl_elem_value_sizeof ****
N/A int snd_ctl_elem_write ( snd_ctl_t * ctl,snd_ctl_elem_value_t * control)
        Set CTL element value.
          **** NOT AVAILABLE/USED snd_ctl_elem_write ****
N/A void snd_ctl_event_clear ( snd_ctl_event_t * obj )
        clear given snd_ctl_event_t object
          **** NOT AVAILABLE/USED snd_ctl_event_clear ****
N/A void snd_ctl_event_copy ( snd_ctl_event_t * dst,const snd_ctl_event_t * src)
        copy one snd_ctl_event_t to another
          **** NOT AVAILABLE/USED snd_ctl_event_copy ****
N/A unsigned int snd_ctl_event_elem_get_device ( const snd_ctl_event_t * obj )
        Get device part of CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_device ****
N/A void snd_ctl_event_elem_get_id ( const snd_ctl_event_t * obj,snd_ctl_elem_id_t * ptr)
        Get CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_id ****
N/A unsigned int snd_ctl_event_elem_get_index ( const snd_ctl_event_t * obj )
        Get index part of CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_index ****
N/A snd_ctl_elem_iface_t snd_ctl_event_elem_get_interface ( const snd_ctl_event_t * obj )
        Get interface part of CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_interface ****
N/A unsigned int snd_ctl_event_elem_get_mask ( const snd_ctl_event_t * obj )
        Get event mask for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_mask ****
N/A const char* snd_ctl_event_elem_get_name ( const snd_ctl_event_t * obj )
        Get name part of CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_name ****
N/A unsigned int snd_ctl_event_elem_get_numid ( const snd_ctl_event_t * obj )
        Get element numeric identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_numid ****
N/A unsigned int snd_ctl_event_elem_get_subdevice ( const snd_ctl_event_t * obj )
        Get subdevice part of CTL element identifier for an element related event.
          **** NOT AVAILABLE/USED snd_ctl_event_elem_get_subdevice ****
N/A void snd_ctl_event_free ( snd_ctl_event_t * obj )
        frees a previously allocated snd_ctl_event_t
          **** NOT AVAILABLE/USED snd_ctl_event_free ****
N/A snd_ctl_event_type_t snd_ctl_event_get_type ( const snd_ctl_event_t * obj )
        Get type of a CTL event.
          **** NOT AVAILABLE/USED snd_ctl_event_get_type ****
N/A int snd_ctl_event_malloc ( snd_ctl_event_t ** ptr )
        allocate an invalid snd_ctl_event_t using standard malloc
          **** NOT AVAILABLE/USED snd_ctl_event_malloc ****
N/A size_t snd_ctl_event_sizeof ( void )
        get size of snd_ctl_event_t
          **** NOT AVAILABLE/USED snd_ctl_event_sizeof ****
N/A const char* snd_ctl_event_type_name ( snd_ctl_event_type_t type )
        get name of a CTL event type
          **** NOT AVAILABLE/USED snd_ctl_event_type_name ****
N/A int snd_ctl_get_dB_range ( snd_ctl_t * ctl,const snd_ctl_elem_id_t * id,long * min,long * max)
        Get the dB min/max values on the given control element.
          **** NOT AVAILABLE/USED snd_ctl_get_dB_range ****
N/A int snd_ctl_get_power_state ( snd_ctl_t * ctl,unsigned int * state)
        Get actual Power State.
          **** NOT AVAILABLE/USED snd_ctl_get_power_state ****
N/A const char* snd_ctl_name ( snd_ctl_t * ctl )
        get identifier of CTL handle
          **** NOT AVAILABLE/USED snd_ctl_name ****
N/A int snd_ctl_nonblock ( snd_ctl_t * ctl,int nonblock)
        set nonblock mode
          **** NOT AVAILABLE/USED snd_ctl_nonblock ****
1   int snd_ctl_open ( snd_ctl_t ** ctlp,const char * name,int mode)
        Opens a CTL.
          => Used in    :  alsacontrol.c: pyalsacontrol_init
N/A int snd_ctl_open_lconf ( snd_ctl_t ** ctlp,const char * name,int mode,snd_config_t * lconf)
        Opens a CTL using local configuration.
          **** NOT AVAILABLE/USED snd_ctl_open_lconf ****
N/A int snd_ctl_poll_descriptors ( snd_ctl_t * ctl,struct pollfd * pfds,unsigned int space)
        get poll descriptors
          **** NOT AVAILABLE/USED snd_ctl_poll_descriptors ****
N/A int snd_ctl_poll_descriptors_count ( snd_ctl_t * ctl )
        get count of poll descriptors for CTL handle
          **** NOT AVAILABLE/USED snd_ctl_poll_descriptors_count ****
N/A int snd_ctl_poll_descriptors_revents ( snd_ctl_t * ctl,struct pollfd * pfds,unsigned int nfds,unsigned short * revents)
        get returned events from poll descriptors
          **** NOT AVAILABLE/USED snd_ctl_poll_descriptors_revents ****
N/A int snd_ctl_read ( snd_ctl_t * ctl,snd_ctl_event_t * event)
        Read an event.
          **** NOT AVAILABLE/USED snd_ctl_read ****
N/A int snd_ctl_set_power_state ( snd_ctl_t * ctl,unsigned int state)
        Set Power State to given SND_CTL_POWER_* value and do the power management.
          **** NOT AVAILABLE/USED snd_ctl_set_power_state ****
N/A int snd_ctl_subscribe_events ( snd_ctl_t * ctl,int subscribe)
        Ask to be informed about events (poll, snd_ctl_async, snd_ctl_read).
          **** NOT AVAILABLE/USED snd_ctl_subscribe_events ****
N/A snd_ctl_type_t snd_ctl_type ( snd_ctl_t * ctl )
        get type of CTL handle
          **** NOT AVAILABLE/USED snd_ctl_type ****
N/A int snd_ctl_wait ( snd_ctl_t * ctl,int timeout)
        Wait for a CTL to become ready (i.e. at least one event pending).
          **** NOT AVAILABLE/USED snd_ctl_wait ****
N/A int snd_device_name_free_hint ( void ** hints )
        Free a string list with device name hints.
          **** NOT AVAILABLE/USED snd_device_name_free_hint ****
N/A char* snd_device_name_get_hint ( const void * hint,const char * id)
        Get a hint Free a string list with device name hints.
          **** NOT AVAILABLE/USED snd_device_name_get_hint ****
N/A int snd_device_name_hint ( int card,const char * iface,void *** hints)
        Return string list with device name hints.
          **** NOT AVAILABLE/USED snd_device_name_hint ****
N/A int snd_tlv_convert_from_dB ( unsigned int * tlv,long rangemin,long rangemax,long db_gain,long * value,int xdir)
        Convert from dB gain to the corresponding raw value.
          **** NOT AVAILABLE/USED snd_tlv_convert_from_dB ****
N/A int snd_tlv_convert_to_dB ( unsigned int * tlv,long rangemin,long rangemax,long volume,long * db_gain)
        Convert the given raw volume value to a dB gain.
          **** NOT AVAILABLE/USED snd_tlv_convert_to_dB ****
N/A int snd_tlv_get_dB_range ( unsigned int * tlv,long rangemin,long rangemax,long * min,long * max)
        Get the dB min/max values.
          **** NOT AVAILABLE/USED snd_tlv_get_dB_range ****
N/A int snd_tlv_parse_dB_info ( unsigned int * tlv,unsigned int tlv_size,unsigned int ** db_tlvp)
        Parse TLV stream and retrieve dB information.
          **** NOT AVAILABLE/USED snd_tlv_parse_dB_info ****
STAT Control Interface              Functions   :  97 missing ( 52%)   0 excluded (  0%) of 185 total ( 48% covered).



STAT Control Interface              SUMMARY     : 137 missing ( 53%)   0 excluded (  0%) of 257 total ( 47% covered).





High level Control Interface
============================



Typedefs
--------
N/A typedef int(*) snd_hctl_callback_t(snd_hctl_t *hctl, unsigned int mask, snd_hctl_elem_t *elem)
        HCTL callback function.
          **** NOT AVAILABLE/USED snd_hctl_callback_t ****
N/A typedef int(*) snd_hctl_compare_t(const snd_hctl_elem_t *e1, const snd_hctl_elem_t *e2)
        Compare function for sorting HCTL elements.
          **** NOT AVAILABLE/USED snd_hctl_compare_t ****
N/A typedef int(*) snd_hctl_elem_callback_t(snd_hctl_elem_t *elem, unsigned int mask)
        HCTL element callback function.
          **** NOT AVAILABLE/USED snd_hctl_elem_callback_t ****
6   typedef struct _snd_hctl_elem snd_hctl_elem_t
        HCTL element handle
          => Used in    : alsahcontrol.c: element_callback
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
          => Used in    : alsahcontrol.c: PYHCTLELEMENT
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
          => Used in    : alsahcontrol.c: PYHCTLINFO
          => Used in    : alsahcontrol.c: PYHCTLVALUE
2   typedef struct _snd_hctl snd_hctl_t
        HCTL handle
          => Used in    : alsahcontrol.c: PYHCTL
          => Used in    : alsahcontrol.c: PYHCTLELEMENT
STAT High level Control Interface   Typedefs    :   3 missing ( 60%)   0 excluded (  0%) of   5 total ( 40% covered).



Functions
---------
2   int snd_hctl_close ( snd_hctl_t * hctl )
        close HCTL handle
          => Used in    : alsahcontrol.c: pyalsahcontrol_init
          => Used in    : alsahcontrol.c: pyalsahcontrol_dealloc
N/A int snd_hctl_compare_fast ( const snd_hctl_elem_t * c1,const snd_hctl_elem_t * c2)
        A "don't care" fast compare functions that may be used with snd_hctl_set_compare.
          **** NOT AVAILABLE/USED snd_hctl_compare_fast ****
4   snd_ctl_t* snd_hctl_ctl ( snd_hctl_t * hctl )
        Get a ctl handle associated to the given hctl handle.
          => Used in    : alsahcontrol.c: simple_id_fcn
          => Used in    : alsahcontrol.c: pyalsahcontrol_elementnew
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
N/A void* snd_hctl_elem_get_callback_private ( const snd_hctl_elem_t * obj )
        Get callback private value for an HCTL element.
          **** NOT AVAILABLE/USED snd_hctl_elem_get_callback_private ****
1   unsigned int snd_hctl_elem_get_device ( const snd_hctl_elem_t * obj )
        Get device part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
N/A snd_hctl_t* snd_hctl_elem_get_hctl ( snd_hctl_elem_t * elem )
        Get HCTL handle for an HCTL element.
          **** NOT AVAILABLE/USED snd_hctl_elem_get_hctl ****
3   void snd_hctl_elem_get_id ( const snd_hctl_elem_t * obj,snd_ctl_elem_id_t * ptr)
        Get CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_lock
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_unlock
1   unsigned int snd_hctl_elem_get_index ( const snd_hctl_elem_t * obj )
        Get index part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
1   snd_ctl_elem_iface_t snd_hctl_elem_get_interface ( const snd_hctl_elem_t * obj )
        Get interface part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
1   const char* snd_hctl_elem_get_name ( const snd_hctl_elem_t * obj )
        Get name part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_getname
1   unsigned int snd_hctl_elem_get_numid ( const snd_hctl_elem_t * obj )
        Get element numeric identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
1   unsigned int snd_hctl_elem_get_subdevice ( const snd_hctl_elem_t * obj )
        Get subdevice part of CTL element identifier of a CTL element id/value.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
2   int snd_hctl_elem_info ( snd_hctl_elem_t * elem,snd_ctl_elem_info_t * info)
        Get information for an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_itemnames
          => Used in    : alsahcontrol.c: pyalsahcontrolinfo_init
1   snd_hctl_elem_t* snd_hctl_elem_next ( snd_hctl_elem_t * elem )
        get next HCTL element
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
N/A snd_hctl_elem_t* snd_hctl_elem_prev ( snd_hctl_elem_t * elem )
        get previous HCTL element
          **** NOT AVAILABLE/USED snd_hctl_elem_prev ****
2   int snd_hctl_elem_read ( snd_hctl_elem_t * elem,snd_ctl_elem_value_t * value)
        Get value for an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_read
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_init
3   void snd_hctl_elem_set_callback ( snd_hctl_elem_t * obj,snd_hctl_elem_callback_t val)
        Set callback function for an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_setcallback
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_setcallback
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_dealloc
1   void snd_hctl_elem_set_callback_private ( snd_hctl_elem_t * obj,void * val)
        Set callback private value for an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_setcallback
N/A int snd_hctl_elem_tlv_command ( snd_hctl_elem_t * elem,const unsigned int * tlv)
        Set TLV value for an HCTL element.
          **** NOT AVAILABLE/USED snd_hctl_elem_tlv_command ****
N/A int snd_hctl_elem_tlv_read ( snd_hctl_elem_t * elem,unsigned int * tlv,unsigned int tlv_size)
        Get TLV value for an HCTL element.
          **** NOT AVAILABLE/USED snd_hctl_elem_tlv_read ****
N/A int snd_hctl_elem_tlv_write ( snd_hctl_elem_t * elem,const unsigned int * tlv)
        Set TLV value for an HCTL element.
          **** NOT AVAILABLE/USED snd_hctl_elem_tlv_write ****
1   int snd_hctl_elem_write ( snd_hctl_elem_t * elem,snd_ctl_elem_value_t * value)
        Set value for an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolvalue_write
1   snd_hctl_elem_t* snd_hctl_find_elem ( snd_hctl_t * hctl,const snd_ctl_elem_id_t * id)
        Search an HCTL element.
          => Used in    : alsahcontrol.c: pyalsahcontrolelement_init
1   snd_hctl_elem_t* snd_hctl_first_elem ( snd_hctl_t * hctl )
        get first element for an HCTL
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
N/A int snd_hctl_free ( snd_hctl_t * hctl )
        free HCTL loaded elements
          **** NOT AVAILABLE/USED snd_hctl_free ****
N/A void* snd_hctl_get_callback_private ( snd_hctl_t * hctl )
        Get callback private value for an HCTL.
          **** NOT AVAILABLE/USED snd_hctl_get_callback_private ****
2   unsigned int snd_hctl_get_count ( snd_hctl_t * hctl )
        Get number of loaded elements for an HCTL.
          => Used in    : alsahcontrol.c: pyalsahcontrol_getcount
          => Used in    : alsahcontrol.c: pyalsahcontrol_list
1   int snd_hctl_handle_events ( snd_hctl_t * hctl )
        Handle pending HCTL events invoking callbacks.
          => Used in    : alsahcontrol.c: pyalsahcontrol_handleevents
N/A snd_hctl_elem_t* snd_hctl_last_elem ( snd_hctl_t * hctl )
        get last element for an HCTL
          **** NOT AVAILABLE/USED snd_hctl_last_elem ****
1   int snd_hctl_load ( snd_hctl_t * hctl )
        Load an HCTL with all elements and sort them.
          => Used in    : alsahcontrol.c: pyalsahcontrol_init
N/A const char* snd_hctl_name ( snd_hctl_t * hctl )
        get identifier of HCTL handle
          **** NOT AVAILABLE/USED snd_hctl_name ****
N/A int snd_hctl_nonblock ( snd_hctl_t * hctl,int nonblock)
        set nonblock mode
          **** NOT AVAILABLE/USED snd_hctl_nonblock ****
1   int snd_hctl_open ( snd_hctl_t ** hctlp,const char * name,int mode)
        Opens an HCTL.
          => Used in    : alsahcontrol.c: pyalsahcontrol_init
N/A int snd_hctl_open_ctl ( snd_hctl_t ** hctlp,snd_ctl_t * ctl)
        Opens an HCTL.
          **** NOT AVAILABLE/USED snd_hctl_open_ctl ****
1   int snd_hctl_poll_descriptors ( snd_hctl_t * hctl,struct pollfd * pfds,unsigned int space)
        get poll descriptors
          => Used in    : alsahcontrol.c: pyalsahcontrol_registerpoll
1   int snd_hctl_poll_descriptors_count ( snd_hctl_t * hctl )
        get count of poll descriptors for HCTL handle
          => Used in    : alsahcontrol.c: pyalsahcontrol_registerpoll
N/A int snd_hctl_poll_descriptors_revents ( snd_hctl_t * hctl,struct pollfd * pfds,unsigned int nfds,unsigned short * revents)
        get returned events from poll descriptors
          **** NOT AVAILABLE/USED snd_hctl_poll_descriptors_revents ****
N/A void snd_hctl_set_callback ( snd_hctl_t * hctl,snd_hctl_callback_t callback)
        Set callback function for an HCTL.
          **** NOT AVAILABLE/USED snd_hctl_set_callback ****
N/A void snd_hctl_set_callback_private ( snd_hctl_t * hctl,void * callback_private)
        Set callback private value for an HCTL.
          **** NOT AVAILABLE/USED snd_hctl_set_callback_private ****
N/A int snd_hctl_set_compare ( snd_hctl_t * hctl,snd_hctl_compare_t compare)
        Change HCTL compare function and reorder elements.
          **** NOT AVAILABLE/USED snd_hctl_set_compare ****
N/A int snd_hctl_wait ( snd_hctl_t * hctl,int timeout)
        Wait for a HCTL to become ready (i.e. at least one event pending).
          **** NOT AVAILABLE/USED snd_hctl_wait ****
STAT High level Control Interface   Functions   :  18 missing ( 44%)   0 excluded (  0%) of  41 total ( 56% covered).



STAT High level Control Interface   SUMMARY     :  21 missing ( 46%)   0 excluded (  0%) of  46 total ( 54% covered).





Setup Control Interface
=======================



Functions
---------
N/A int snd_sctl_build ( snd_sctl_t ** sctl,snd_ctl_t * handle,snd_config_t * conf,snd_config_t * private_data,int mode)
        Build setup control handle.
          **** NOT AVAILABLE/USED snd_sctl_build ****
N/A int snd_sctl_free ( snd_sctl_t * sctl )
        Free setup control handle.
          **** NOT AVAILABLE/USED snd_sctl_free ****
N/A int snd_sctl_install ( snd_sctl_t * h )
        Install given values to control elements.
          **** NOT AVAILABLE/USED snd_sctl_install ****
N/A int snd_sctl_remove ( snd_sctl_t * h )
        Remove (restore) previous values from control elements.
          **** NOT AVAILABLE/USED snd_sctl_remove ****
STAT Setup Control Interface        Functions   :   4 missing (100%)   0 excluded (  0%) of   4 total (  0% covered).



STAT Setup Control Interface        SUMMARY     :   4 missing (100%)   0 excluded (  0%) of   4 total (  0% covered).





MIDI Sequencer
==============



Defines
-------
N/A #define SND_SEQ_ADDRESS_BROADCAST 255
        send event to all queues/clients/ports/channels
          **** NOT AVAILABLE/USED SND_SEQ_ADDRESS_BROADCAST ****
N/A #define SND_SEQ_ADDRESS_SUBSCRIBERS 254
        send event to all subscribed ports
          **** NOT AVAILABLE/USED SND_SEQ_ADDRESS_SUBSCRIBERS ****
N/A #define SND_SEQ_ADDRESS_UNKNOWN 253
        special client (port) ids unknown source
          **** NOT AVAILABLE/USED SND_SEQ_ADDRESS_UNKNOWN ****
N/A #define SND_SEQ_CLIENT_SYSTEM 0
        known client numbers system client
          **** NOT AVAILABLE/USED SND_SEQ_CLIENT_SYSTEM ****
EXC #define SND_SEQ_DLSYM_VERSION _dlsym_seq_001
        dlsym version for interface entry callback
          ==>    Excluded: I think there is no real use in pyalsa
2   #define SND_SEQ_NONBLOCK 0x0001
        sequencer opening mode non-blocking mode (flag to open mode)
          => Used in    :      alsaseq.c: Sequencer_init
          => Used in    :      alsaseq.c: Sequencer_set_mode
1   #define SND_SEQ_OPEN_DUPLEX (SND_SEQ_OPEN_OUTPUT|SND_SEQ_OPEN_INPUT)
        open for both input and output (read/write)
          => Used in    :      alsaseq.c: Sequencer_init
N/A #define SND_SEQ_OPEN_INPUT 2
        open for input (read)
          **** NOT AVAILABLE/USED SND_SEQ_OPEN_INPUT ****
N/A #define SND_SEQ_OPEN_OUTPUT 1
        sequencer opening stream types open for output (write)
          **** NOT AVAILABLE/USED SND_SEQ_OPEN_OUTPUT ****
N/A #define snd_seq_system_info_alloca ( ptr ) __snd_alloca(ptr, snd_seq_system_info)
        allocate a snd_seq_system_info_t container on stack
          **** NOT AVAILABLE/USED snd_seq_system_info_alloca ****
STAT MIDI Sequencer                 Defines     :   7 missing ( 70%)   1 excluded ( 10%) of  10 total ( 30% covered).



Typedefs
--------
N/A typedef struct _snd_seq_system_info snd_seq_system_info_t
        system information container
          **** NOT AVAILABLE/USED snd_seq_system_info_t ****
3   typedef struct _snd_seq snd_seq_t
        Sequencer handle
          => Used in    :      alsaseq.c: SequencerObject
          => Used in    :      alsaseq.c: _query_connections_list
          => Used in    :      alsaseq.c: _query_connections
N/A typedef enum _snd_seq_type snd_seq_type_t
        sequencer handle type
          **** NOT AVAILABLE/USED snd_seq_type_t ****
STAT MIDI Sequencer                 Typedefs    :   2 missing ( 67%)   0 excluded (  0%) of   3 total ( 33% covered).



Enumerations
------------
enum _snd_seq_type
N/A SND_SEQ_TYPE_HW
        hardware
          **** NOT AVAILABLE/USED SND_SEQ_TYPE_HW ****
N/A SND_SEQ_TYPE_SHM
        shared memory (NYI)
          **** NOT AVAILABLE/USED SND_SEQ_TYPE_SHM ****
N/A SND_SEQ_TYPE_INET
        network (NYI)
          **** NOT AVAILABLE/USED SND_SEQ_TYPE_INET ****
STAT MIDI Sequencer                 Enumerations:   3 missing (100%)   0 excluded (  0%) of   3 total (  0% covered).



Functions
---------
N/A int snd_seq_client_id ( snd_seq_t * seq )
        Get the client id.
          **** NOT AVAILABLE/USED snd_seq_client_id ****
1   int snd_seq_close ( snd_seq_t * seq )
        Close the sequencer.
          => Used in    :      alsaseq.c: Sequencer_dealloc
N/A size_t snd_seq_get_input_buffer_size ( snd_seq_t * seq )
        Return the size of input buffer.
          **** NOT AVAILABLE/USED snd_seq_get_input_buffer_size ****
N/A size_t snd_seq_get_output_buffer_size ( snd_seq_t * seq )
        Return the size of output buffer.
          **** NOT AVAILABLE/USED snd_seq_get_output_buffer_size ****
2   const char* snd_seq_name ( snd_seq_t * seq )
        get identifier of sequencer handle
          => Used in    :      alsaseq.c: Sequencer_get_name
          => Used in    :      alsaseq.c: Sequencer_repr
1   int snd_seq_nonblock ( snd_seq_t * seq,int nonblock)
        Set nonblock mode.
          => Used in    :      alsaseq.c: Sequencer_set_mode
1   int snd_seq_open ( snd_seq_t ** seqp,const char * name,int streams,int mode)
        Open the ALSA sequencer.
          => Used in    :      alsaseq.c: Sequencer_init
EXC int snd_seq_open_lconf ( snd_seq_t ** seqp,const char * name,int streams,int mode,snd_config_t * lconf)
        Open the ALSA sequencer using local configuration.
          ==>    Excluded: need a snd_config port for implementing it
1   int snd_seq_poll_descriptors ( snd_seq_t * seq,struct pollfd * pfds,unsigned int space,short events)
        Get poll descriptors.
          => Used in    :      alsaseq.c: Sequencer_receive_events
1   int snd_seq_poll_descriptors_count ( snd_seq_t * seq,short events)
        Returns the number of poll descriptors.
          => Used in    :      alsaseq.c: Sequencer_receive_events
EXC int snd_seq_poll_descriptors_revents ( snd_seq_t * seq,struct pollfd * pfds,unsigned int nfds,unsigned short * revents)
        get returned events from poll descriptors
          ==>    Excluded: no real use in pyalsa
N/A int snd_seq_set_input_buffer_size ( snd_seq_t * seq,size_t size)
        Resize the input buffer.
          **** NOT AVAILABLE/USED snd_seq_set_input_buffer_size ****
N/A int snd_seq_set_output_buffer_size ( snd_seq_t * seq,size_t size)
        Change the size of output buffer.
          **** NOT AVAILABLE/USED snd_seq_set_output_buffer_size ****
N/A int snd_seq_system_info ( snd_seq_t * seq,snd_seq_system_info_t * info)
        obtain the sequencer system information
          **** NOT AVAILABLE/USED snd_seq_system_info ****
EXC void snd_seq_system_info_copy ( snd_seq_system_info_t * dst,const snd_seq_system_info_t * src)
        Copy one snd_seq_system_info_t to another.
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_system_info_free ( snd_seq_system_info_t * obj )
        Frees a previously allocated snd_seq_system_info_t.
          ==>    Excluded: no real use in pyalsa
N/A int snd_seq_system_info_get_channels ( const snd_seq_system_info_t * info )
        Get maximum number of channels.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_channels ****
N/A int snd_seq_system_info_get_clients ( const snd_seq_system_info_t * info )
        Get maximum number of clients.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_clients ****
N/A int snd_seq_system_info_get_cur_clients ( const snd_seq_system_info_t * info )
        Get the current number of clients.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_cur_clients ****
N/A int snd_seq_system_info_get_cur_queues ( const snd_seq_system_info_t * info )
        Get the current number of queues.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_cur_queues ****
N/A int snd_seq_system_info_get_ports ( const snd_seq_system_info_t * info )
        Get maximum number of ports.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_ports ****
N/A int snd_seq_system_info_get_queues ( const snd_seq_system_info_t * info )
        Get maximum number of queues.
          **** NOT AVAILABLE/USED snd_seq_system_info_get_queues ****
EXC int snd_seq_system_info_malloc ( snd_seq_system_info_t ** ptr )
        Allocate an empty snd_seq_system_info_t using standard malloc.
          ==>    Excluded: snd_seq_system_info_alloca used instead
EXC size_t snd_seq_system_info_sizeof ( void )
        Get size of snd_seq_system_info_t.
          ==>    Excluded: currently not used
N/A snd_seq_type_t snd_seq_type ( snd_seq_t * seq )
        get type of sequencer handle
          **** NOT AVAILABLE/USED snd_seq_type ****
STAT MIDI Sequencer                 Functions   :  13 missing ( 52%)   6 excluded ( 24%) of  25 total ( 48% covered).



STAT MIDI Sequencer                 SUMMARY     :  25 missing ( 61%)   7 excluded ( 17%) of  41 total ( 39% covered).





Sequencer Client Interface
==========================



Defines
-------
6   #define snd_seq_client_info_alloca ( ptr ) __snd_alloca(ptr, snd_seq_client_info)
        allocate a snd_seq_client_info_t container on stack
          => Used in    :      alsaseq.c: Sequencer_get_clientname
          => Used in    :      alsaseq.c: Sequencer_get_client_id
          => Used in    :      alsaseq.c: Sequencer_repr
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_client_info
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A #define snd_seq_client_pool_alloca ( ptr ) __snd_alloca(ptr, snd_seq_client_pool)
        allocate a snd_seq_client_pool_t container on stack
          **** NOT AVAILABLE/USED snd_seq_client_pool_alloca ****
STAT Sequencer Client Interface     Defines     :   1 missing ( 50%)   0 excluded (  0%) of   2 total ( 50% covered).



Typedefs
--------
6   typedef struct _snd_seq_client_info snd_seq_client_info_t
        client information container
          => Used in    :      alsaseq.c: Sequencer_get_clientname
          => Used in    :      alsaseq.c: Sequencer_get_client_id
          => Used in    :      alsaseq.c: Sequencer_repr
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_client_info
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A typedef struct _snd_seq_client_pool snd_seq_client_pool_t
        client pool information container
          **** NOT AVAILABLE/USED snd_seq_client_pool_t ****
N/A typedef enum snd_seq_client_type snd_seq_client_type_t
        client types
          **** NOT AVAILABLE/USED snd_seq_client_type_t ****
STAT Sequencer Client Interface     Typedefs    :   2 missing ( 67%)   0 excluded (  0%) of   3 total ( 33% covered).



Enumerations
------------
enum snd_seq_client_type
N/A SND_SEQ_USER_CLIENT
        user client
          **** NOT AVAILABLE/USED SND_SEQ_USER_CLIENT ****
N/A SND_SEQ_KERNEL_CLIENT
        kernel client
          **** NOT AVAILABLE/USED SND_SEQ_KERNEL_CLIENT ****
STAT Sequencer Client Interface     Enumerations:   2 missing (100%)   0 excluded (  0%) of   2 total (  0% covered).



Functions
---------
EXC void snd_seq_client_info_copy ( snd_seq_client_info_t * dst,const snd_seq_client_info_t * src)
        copy one snd_seq_client_info_t to another
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_client_info_free ( snd_seq_client_info_t * obj )
        frees a previously allocated snd_seq_client_info_t
          ==>    Excluded: no real use in pyalsa
1   int snd_seq_client_info_get_broadcast_filter ( const snd_seq_client_info_t * info )
        Get the broadcast filter usage of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
6   int snd_seq_client_info_get_client ( const snd_seq_client_info_t * info )
        Get client id of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_id
          => Used in    :      alsaseq.c: Sequencer_repr
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_client_info
          => Used in    :      alsaseq.c: Sequencer_get_port_info
1   int snd_seq_client_info_get_error_bounce ( const snd_seq_client_info_t * info )
        Get the error-bounce usage of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
1   const unsigned char* snd_seq_client_info_get_event_filter ( const snd_seq_client_info_t * info )
        Get the event filter bitmap of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
1   int snd_seq_client_info_get_event_lost ( const snd_seq_client_info_t * info )
        Get the number of lost events of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
4   const char* snd_seq_client_info_get_name ( snd_seq_client_info_t * info )
        Get the name of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_clientname
          => Used in    :      alsaseq.c: Sequencer_repr
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_client_info
1   int snd_seq_client_info_get_num_ports ( const snd_seq_client_info_t * info )
        Get the number of opened ports of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
1   snd_seq_client_type_t snd_seq_client_info_get_type ( const snd_seq_client_info_t * info )
        Get client type of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_get_client_info
EXC int snd_seq_client_info_malloc ( snd_seq_client_info_t ** ptr )
        allocate an empty snd_seq_client_info_t using standard malloc
          ==>    Excluded: snd_seq_client_info_alloca used instead
N/A void snd_seq_client_info_set_broadcast_filter ( snd_seq_client_info_t * info,int val)
        Set the broadcast filter usage of a client_info container.
          **** NOT AVAILABLE/USED snd_seq_client_info_set_broadcast_filter ****
1   void snd_seq_client_info_set_client ( snd_seq_client_info_t * info,int client)
        Set the client id of a client_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A void snd_seq_client_info_set_error_bounce ( snd_seq_client_info_t * info,int val)
        Set the error-bounce usage of a client_info container.
          **** NOT AVAILABLE/USED snd_seq_client_info_set_error_bounce ****
N/A void snd_seq_client_info_set_event_filter ( snd_seq_client_info_t * info,unsigned char * filter)
        Set the event filter bitmap of a client_info container.
          **** NOT AVAILABLE/USED snd_seq_client_info_set_event_filter ****
EXC void snd_seq_client_info_set_name ( snd_seq_client_info_t * info,const char * name)
        Set the name of a client_info container.
          ==>    Excluded: snd_seq_set_client_name used instead
EXC size_t snd_seq_client_info_sizeof ( void )
        get size of snd_seq_client_info_t
          ==>    Excluded: currently not used
EXC void snd_seq_client_pool_copy ( snd_seq_client_pool_t * dst,const snd_seq_client_pool_t * src)
        copy one snd_seq_client_pool_t to another
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_client_pool_free ( snd_seq_client_pool_t * obj )
        frees a previously allocated snd_seq_client_pool_t
          ==>    Excluded: no real use in pyalsa
EXC int snd_seq_client_pool_get_client ( const snd_seq_client_pool_t * info )
        Get the client id of a queue_info container.
          ==>    Excluded: snd_seq_client_id used instead
N/A size_t snd_seq_client_pool_get_input_free ( const snd_seq_client_pool_t * info )
        Get the available size on input pool of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_client_pool_get_input_free ****
N/A size_t snd_seq_client_pool_get_input_pool ( const snd_seq_client_pool_t * info )
        Get the input pool size of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_client_pool_get_input_pool ****
N/A size_t snd_seq_client_pool_get_output_free ( const snd_seq_client_pool_t * info )
        Get the available size on output pool of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_client_pool_get_output_free ****
N/A size_t snd_seq_client_pool_get_output_pool ( const snd_seq_client_pool_t * info )
        Get the output pool size of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_client_pool_get_output_pool ****
N/A size_t snd_seq_client_pool_get_output_room ( const snd_seq_client_pool_t * info )
        Get the output room size of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_client_pool_get_output_room ****
EXC int snd_seq_client_pool_malloc ( snd_seq_client_pool_t ** ptr )
        allocate an empty snd_seq_client_pool_t using standard malloc
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_client_pool_set_input_pool ( snd_seq_client_pool_t * info,size_t size)
        Set the input pool size of a queue_info container.
          ==>    Excluded: snd_seq_set_client_pool_input used instead
EXC void snd_seq_client_pool_set_output_pool ( snd_seq_client_pool_t * info,size_t size)
        Set the output pool size of a queue_info container.
          ==>    Excluded: snd_seq_set_client_pool_output used instead
EXC void snd_seq_client_pool_set_output_room ( snd_seq_client_pool_t * info,size_t size)
        Set the output room size of a queue_info container.
          ==>    Excluded: snd_seq_set_client_pool_output_room used instead
EXC size_t snd_seq_client_pool_sizeof ( void )
        get size of snd_seq_client_pool_t
          ==>    Excluded: currently not used
1   int snd_seq_get_any_client_info ( snd_seq_t * seq,int client,snd_seq_client_info_t * info)
        obtain the information of the given client
          => Used in    :      alsaseq.c: Sequencer_get_client_info
5   int snd_seq_get_client_info ( snd_seq_t * seq,snd_seq_client_info_t * info)
        obtain the current client information
          => Used in    :      alsaseq.c: Sequencer_get_clientname
          => Used in    :      alsaseq.c: Sequencer_get_client_id
          => Used in    :      alsaseq.c: Sequencer_repr
          => Used in    :      alsaseq.c: Sequencer_get_client_info
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A int snd_seq_get_client_pool ( snd_seq_t * seq,snd_seq_client_pool_t * info)
        obtain the pool information of the current client
          **** NOT AVAILABLE/USED snd_seq_get_client_pool ****
1   int snd_seq_query_next_client ( snd_seq_t * seq,snd_seq_client_info_t * info)
        query the next client
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A int snd_seq_set_client_info ( snd_seq_t * seq,snd_seq_client_info_t * info)
        set the current client information
          **** NOT AVAILABLE/USED snd_seq_set_client_info ****
EXC int snd_seq_set_client_pool ( snd_seq_t * seq,snd_seq_client_pool_t * info)
        set the pool information
          ==>    Excluded: snd_seq_set_client_pool_* used instead
STAT Sequencer Client Interface     Functions   :  10 missing ( 28%)  14 excluded ( 39%) of  36 total ( 72% covered).



STAT Sequencer Client Interface     SUMMARY     :  15 missing ( 35%)  14 excluded ( 33%) of  43 total ( 65% covered).





Sequencer Port Interface
========================



Defines
-------
N/A #define SND_SEQ_PORT_CAP_DUPLEX (1<<4)
        allow read/write duplex
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_DUPLEX ****
N/A #define SND_SEQ_PORT_CAP_NO_EXPORT (1<<7)
        routing not allowed
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_NO_EXPORT ****
N/A #define SND_SEQ_PORT_CAP_READ (1<<0)
        port capabilities (32 bits) readable from this port
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_READ ****
N/A #define SND_SEQ_PORT_CAP_SUBS_READ (1<<5)
        allow read subscription
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_SUBS_READ ****
N/A #define SND_SEQ_PORT_CAP_SUBS_WRITE (1<<6)
        allow write subscription
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_SUBS_WRITE ****
N/A #define SND_SEQ_PORT_CAP_SYNC_READ (1<<2)
        allow read subscriptions
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_SYNC_READ ****
N/A #define SND_SEQ_PORT_CAP_SYNC_WRITE (1<<3)
        allow write subscriptions
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_SYNC_WRITE ****
N/A #define SND_SEQ_PORT_CAP_WRITE (1<<1)
        writable to this port
          **** NOT AVAILABLE/USED SND_SEQ_PORT_CAP_WRITE ****
2   #define snd_seq_port_info_alloca ( ptr ) __snd_alloca(ptr, snd_seq_port_info)
        allocate a snd_seq_port_info_t container on stack
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A #define SND_SEQ_PORT_SYSTEM_ANNOUNCE 1
        system announce port
          **** NOT AVAILABLE/USED SND_SEQ_PORT_SYSTEM_ANNOUNCE ****
N/A #define SND_SEQ_PORT_SYSTEM_TIMER 0
        known port numbers system timer port
          **** NOT AVAILABLE/USED SND_SEQ_PORT_SYSTEM_TIMER ****
N/A #define SND_SEQ_PORT_TYPE_APPLICATION (1<<20)
        This port belongs to an application, such as a sequencer or editor.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_APPLICATION ****
N/A #define SND_SEQ_PORT_TYPE_DIRECT_SAMPLE (1<<11)
        Instruments can be downloaded to this port (with SND_SEQ_EVENT_INSTR_xxx messages sent directly).
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_DIRECT_SAMPLE ****
N/A #define SND_SEQ_PORT_TYPE_HARDWARE (1<<16)
        This port is implemented in hardware.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_HARDWARE ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_GENERIC (1<<1)
        This port understands MIDI messages.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_GENERIC ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_GM (1<<2)
        This port is compatible with the General MIDI specification.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_GM ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_GM2 (1<<6)
        This port is compatible with the General MIDI 2 specification.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_GM2 ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_GS (1<<3)
        This port is compatible with the Roland GS standard.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_GS ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_MT32 (1<<5)
        This port is compatible with the Roland MT-32.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_MT32 ****
N/A #define SND_SEQ_PORT_TYPE_MIDI_XG (1<<4)
        This port is compatible with the Yamaha XG specification.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_MIDI_XG ****
N/A #define SND_SEQ_PORT_TYPE_PORT (1<<19)
        This port may connect to other devices (whose characteristics are not known).
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_PORT ****
N/A #define SND_SEQ_PORT_TYPE_SAMPLE (1<<12)
        Instruments can be downloaded to this port (with SND_SEQ_EVENT_INSTR_xxx messages sent directly or
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_SAMPLE ****
N/A #define SND_SEQ_PORT_TYPE_SOFTWARE (1<<17)
        This port is implemented in software.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_SOFTWARE ****
N/A #define SND_SEQ_PORT_TYPE_SPECIFIC (1<<0)
        Messages sent from/to this port have device-specific semantics.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_SPECIFIC ****
N/A #define SND_SEQ_PORT_TYPE_SYNTH (1<<10)
        This port understands SND_SEQ_EVENT_SAMPLE_xxx messages (these are not MIDI messages).
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_SYNTH ****
N/A #define SND_SEQ_PORT_TYPE_SYNTHESIZER (1<<18)
        Messages sent to this port will generate sounds.
          **** NOT AVAILABLE/USED SND_SEQ_PORT_TYPE_SYNTHESIZER ****
STAT Sequencer Port Interface       Defines     :  25 missing ( 96%)   0 excluded (  0%) of  26 total (  4% covered).



Typedefs
--------
2   typedef struct _snd_seq_port_info snd_seq_port_info_t
        port information container
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_port_info
STAT Sequencer Port Interface       Typedefs    :   0 missing (  0%)   0 excluded (  0%) of   1 total (100% covered).



Functions
---------
N/A int snd_seq_create_port ( snd_seq_t * seq,snd_seq_port_info_t * port)
        create a sequencer port on the current client
          **** NOT AVAILABLE/USED snd_seq_create_port ****
N/A int snd_seq_delete_port ( snd_seq_t * seq,int port)
        delete a sequencer port on the current client
          **** NOT AVAILABLE/USED snd_seq_delete_port ****
1   int snd_seq_get_any_port_info ( snd_seq_t * seq,int client,int port,snd_seq_port_info_t * info)
        obtain the information of a port on an arbitrary client
          => Used in    :      alsaseq.c: Sequencer_get_port_info
EXC int snd_seq_get_port_info ( snd_seq_t * seq,int port,snd_seq_port_info_t * info)
        obtain the information of a port on the current client
          ==>    Excluded: snd_seq_get_any_port_info used instead
EXC void snd_seq_port_info_copy ( snd_seq_port_info_t * dst,const snd_seq_port_info_t * src)
        copy one snd_seq_port_info_t to another
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_port_info_free ( snd_seq_port_info_t * obj )
        frees a previously allocated snd_seq_port_info_t
          ==>    Excluded: no real use in pyalsa
1   const snd_seq_addr_t* snd_seq_port_info_get_addr ( const snd_seq_port_info_t * info )
        Get client/port address of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
1   unsigned int snd_seq_port_info_get_capability ( const snd_seq_port_info_t * info )
        Get the capability bits of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A int snd_seq_port_info_get_client ( const snd_seq_port_info_t * info )
        Get client id of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_client ****
N/A int snd_seq_port_info_get_midi_channels ( const snd_seq_port_info_t * info )
        Get the midi channels of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_midi_channels ****
N/A int snd_seq_port_info_get_midi_voices ( const snd_seq_port_info_t * info )
        Get the midi voices of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_midi_voices ****
2   const char* snd_seq_port_info_get_name ( const snd_seq_port_info_t * info )
        Get the name of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
          => Used in    :      alsaseq.c: Sequencer_get_port_info
1   int snd_seq_port_info_get_port ( const snd_seq_port_info_t * info )
        Get port id of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A int snd_seq_port_info_get_port_specified ( const snd_seq_port_info_t * info )
        Get the port-specified mode of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_port_specified ****
N/A int snd_seq_port_info_get_read_use ( const snd_seq_port_info_t * info )
        Get the number of read subscriptions of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_read_use ****
N/A int snd_seq_port_info_get_synth_voices ( const snd_seq_port_info_t * info )
        Get the synth voices of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_synth_voices ****
N/A int snd_seq_port_info_get_timestamp_queue ( const snd_seq_port_info_t * info )
        Get the queue id to update timestamps.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_timestamp_queue ****
N/A int snd_seq_port_info_get_timestamp_real ( const snd_seq_port_info_t * info )
        Get whether the time-stamping of the given port is real-time mode.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_timestamp_real ****
N/A int snd_seq_port_info_get_timestamping ( const snd_seq_port_info_t * info )
        Get the time-stamping mode of the given port in a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_timestamping ****
1   unsigned int snd_seq_port_info_get_type ( const snd_seq_port_info_t * info )
        Get the type bits of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_get_port_info
N/A int snd_seq_port_info_get_write_use ( const snd_seq_port_info_t * info )
        Get the number of write subscriptions of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_get_write_use ****
EXC int snd_seq_port_info_malloc ( snd_seq_port_info_t ** ptr )
        allocate an empty snd_seq_port_info_t using standard malloc
          ==>    Excluded: snd_seq_port_info_alloca used instead
EXC void snd_seq_port_info_set_addr ( snd_seq_port_info_t * info,const snd_seq_addr_t * addr)
        Set the client/port address of a port_info container.
          ==>    Excluded: snd_seq_port_info_set_client, snd_seq_port_info_set_port used instead
N/A void snd_seq_port_info_set_capability ( snd_seq_port_info_t * info,unsigned int capability)
        set the capability bits of a port_info container
          **** NOT AVAILABLE/USED snd_seq_port_info_set_capability ****
1   void snd_seq_port_info_set_client ( snd_seq_port_info_t * info,int client)
        Set the client id of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A void snd_seq_port_info_set_midi_channels ( snd_seq_port_info_t * info,int channels)
        set the midi channels of a port_info container
          **** NOT AVAILABLE/USED snd_seq_port_info_set_midi_channels ****
N/A void snd_seq_port_info_set_midi_voices ( snd_seq_port_info_t * info,int voices)
        set the midi voices of a port_info container
          **** NOT AVAILABLE/USED snd_seq_port_info_set_midi_voices ****
N/A void snd_seq_port_info_set_name ( snd_seq_port_info_t * info,const char * name)
        Set the name of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_name ****
1   void snd_seq_port_info_set_port ( snd_seq_port_info_t * info,int port)
        Set the port id of a port_info container.
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A void snd_seq_port_info_set_port_specified ( snd_seq_port_info_t * info,int val)
        Set the port-specified mode of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_port_specified ****
N/A void snd_seq_port_info_set_synth_voices ( snd_seq_port_info_t * info,int voices)
        set the synth voices of a port_info container
          **** NOT AVAILABLE/USED snd_seq_port_info_set_synth_voices ****
N/A void snd_seq_port_info_set_timestamp_queue ( snd_seq_port_info_t * info,int queue)
        Set the queue id for timestamping.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_timestamp_queue ****
N/A void snd_seq_port_info_set_timestamp_real ( snd_seq_port_info_t * info,int enable)
        Set whether the timestime is updated in the real-time mode.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_timestamp_real ****
N/A void snd_seq_port_info_set_timestamping ( snd_seq_port_info_t * info,int enable)
        Set the time-stamping mode of the given port.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_timestamping ****
N/A void snd_seq_port_info_set_type ( snd_seq_port_info_t * info,unsigned int type)
        Get the type bits of a port_info container.
          **** NOT AVAILABLE/USED snd_seq_port_info_set_type ****
EXC size_t snd_seq_port_info_sizeof ( void )
        get size of snd_seq_port_info_t
          ==>    Excluded: currently not used
1   int snd_seq_query_next_port ( snd_seq_t * seq,snd_seq_port_info_t * info)
        query the next matching port
          => Used in    :      alsaseq.c: Sequencer_connection_list
N/A int snd_seq_set_port_info ( snd_seq_t * seq,int port,snd_seq_port_info_t * info)
        set the information of a port on the current client
          **** NOT AVAILABLE/USED snd_seq_set_port_info ****
STAT Sequencer Port Interface       Functions   :  23 missing ( 61%)   6 excluded ( 16%) of  38 total ( 39% covered).



STAT Sequencer Port Interface       SUMMARY     :  48 missing ( 74%)   6 excluded (  9%) of  65 total ( 26% covered).





Sequencer Port Subscription
===========================



Defines
-------
3   #define snd_seq_port_subscribe_alloca ( ptr ) __snd_alloca(ptr, snd_seq_port_subscribe)
        allocate a snd_seq_port_subscribe_t container on stack
          => Used in    :      alsaseq.c: Sequencer_connect_ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
1   #define snd_seq_query_subscribe_alloca ( ptr ) __snd_alloca(ptr, snd_seq_query_subscribe)
        allocate a snd_seq_query_subscribe_t container on stack
          => Used in    :      alsaseq.c: _query_connections
STAT Sequencer Port Subscription    Defines     :   0 missing (  0%)   0 excluded (  0%) of   2 total (100% covered).



Typedefs
--------
3   typedef struct _snd_seq_port_subscribe snd_seq_port_subscribe_t
        port subscription container
          => Used in    :      alsaseq.c: Sequencer_connect_ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
2   typedef struct _snd_seq_query_subscribe snd_seq_query_subscribe_t
        subscription query container
          => Used in    :      alsaseq.c: _query_connections_list
          => Used in    :      alsaseq.c: _query_connections
STAT Sequencer Port Subscription    Typedefs    :   0 missing (  0%)   0 excluded (  0%) of   2 total (100% covered).



Enumerations
------------
enum snd_seq_query_subs_type_t
1   SND_SEQ_QUERY_SUBS_READ
        query read subscriptions
          => Used in    :      alsaseq.c: _query_connections
1   SND_SEQ_QUERY_SUBS_WRITE
        query write subscriptions
          => Used in    :      alsaseq.c: _query_connections
STAT Sequencer Port Subscription    Enumerations:   0 missing (  0%)   0 excluded (  0%) of   2 total (100% covered).



Functions
---------
1   int snd_seq_get_port_subscription ( snd_seq_t * seq,snd_seq_port_subscribe_t * sub)
        obtain subscription information
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
EXC void snd_seq_port_subscribe_copy ( snd_seq_port_subscribe_t * dst,const snd_seq_port_subscribe_t * src)
        copy one snd_seq_port_subscribe_t to another
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_port_subscribe_free ( snd_seq_port_subscribe_t * obj )
        frees a previously allocated snd_seq_port_subscribe_t
          ==>    Excluded: no real use in pyalsa
N/A const snd_seq_addr_t* snd_seq_port_subscribe_get_dest ( const snd_seq_port_subscribe_t * info )
        Get destination address of a port_subscribe container.
          **** NOT AVAILABLE/USED snd_seq_port_subscribe_get_dest ****
1   int snd_seq_port_subscribe_get_exclusive ( const snd_seq_port_subscribe_t * info )
        Get the exclusive mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
1   int snd_seq_port_subscribe_get_queue ( const snd_seq_port_subscribe_t * info )
        Get the queue id of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
N/A const snd_seq_addr_t* snd_seq_port_subscribe_get_sender ( const snd_seq_port_subscribe_t * info )
        Get sender address of a port_subscribe container.
          **** NOT AVAILABLE/USED snd_seq_port_subscribe_get_sender ****
1   int snd_seq_port_subscribe_get_time_real ( const snd_seq_port_subscribe_t * info )
        Get the real-time update mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
1   int snd_seq_port_subscribe_get_time_update ( const snd_seq_port_subscribe_t * info )
        Get the time-update mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
EXC int snd_seq_port_subscribe_malloc ( snd_seq_port_subscribe_t ** ptr )
        allocate an empty snd_seq_port_subscribe_t using standard malloc
          ==>    Excluded: snd_seq_port_subscribe_alloca used instead
3   void snd_seq_port_subscribe_set_dest ( snd_seq_port_subscribe_t * info,const snd_seq_addr_t * addr)
        Set destination address of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
1   void snd_seq_port_subscribe_set_exclusive ( snd_seq_port_subscribe_t * info,int val)
        Set the exclusive mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
1   void snd_seq_port_subscribe_set_queue ( snd_seq_port_subscribe_t * info,int q)
        Set the queue id of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
3   void snd_seq_port_subscribe_set_sender ( snd_seq_port_subscribe_t * info,const snd_seq_addr_t * addr)
        Set sender address of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
1   void snd_seq_port_subscribe_set_time_real ( snd_seq_port_subscribe_t * info,int val)
        Set the real-time mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
1   void snd_seq_port_subscribe_set_time_update ( snd_seq_port_subscribe_t * info,int val)
        Set the time-update mode of a port_subscribe container.
          => Used in    :      alsaseq.c: Sequencer_connect_ports
EXC size_t snd_seq_port_subscribe_sizeof ( void )
        get size of snd_seq_port_subscribe_t
          ==>    Excluded: currently not used
1   int snd_seq_query_port_subscribers ( snd_seq_t * seq,snd_seq_query_subscribe_t * subs)
        query port subscriber list
          => Used in    :      alsaseq.c: _query_connections_list
EXC void snd_seq_query_subscribe_copy ( snd_seq_query_subscribe_t * dst,const snd_seq_query_subscribe_t * src)
        copy one snd_seq_query_subscribe_t to another
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_query_subscribe_free ( snd_seq_query_subscribe_t * obj )
        frees a previously allocated snd_seq_query_subscribe_t
          ==>    Excluded: no real use in pyalsa
1   const snd_seq_addr_t* snd_seq_query_subscribe_get_addr ( const snd_seq_query_subscribe_t * info )
        Get the address of subscriber of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
EXC int snd_seq_query_subscribe_get_client ( const snd_seq_query_subscribe_t * info )
        Get the client id of a query_subscribe container.
          ==>    Excluded: snd_seq_query_subscribe_get_addr used instead
1   int snd_seq_query_subscribe_get_exclusive ( const snd_seq_query_subscribe_t * info )
        Get the exclusive mode of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
EXC int snd_seq_query_subscribe_get_index ( const snd_seq_query_subscribe_t * info )
        Get the index of subscriber of a query_subscribe container.
          ==>    Excluded: currently not used
N/A int snd_seq_query_subscribe_get_num_subs ( const snd_seq_query_subscribe_t * info )
        Get the number of subscriptions of a query_subscribe container.
          **** NOT AVAILABLE/USED snd_seq_query_subscribe_get_num_subs ****
EXC int snd_seq_query_subscribe_get_port ( const snd_seq_query_subscribe_t * info )
        Get the port id of a query_subscribe container.
          ==>    Excluded: snd_seq_query_subscribe_get_addr used instead
1   int snd_seq_query_subscribe_get_queue ( const snd_seq_query_subscribe_t * info )
        Get the queue id of subscriber of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
EXC const snd_seq_addr_t* snd_seq_query_subscribe_get_root ( const snd_seq_query_subscribe_t * info )
        Get the client/port address of a query_subscribe container.
          ==>    Excluded: currently not used
1   int snd_seq_query_subscribe_get_time_real ( const snd_seq_query_subscribe_t * info )
        Get the real-time update mode of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
1   int snd_seq_query_subscribe_get_time_update ( const snd_seq_query_subscribe_t * info )
        Get the time-update mode of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
EXC snd_seq_query_subs_type_t snd_seq_query_subscribe_get_type ( const snd_seq_query_subscribe_t * info)
        Get the query type of a query_subscribe container.
          ==>    Excluded: currently not used
EXC int snd_seq_query_subscribe_malloc ( snd_seq_query_subscribe_t ** ptr )
        allocate an empty snd_seq_query_subscribe_t using standard malloc
          ==>    Excluded: no real use in pyalsa
EXC void snd_seq_query_subscribe_set_client ( snd_seq_query_subscribe_t * info,int client)
        Set the client id of a query_subscribe container.
          ==>    Excluded: snd_seq_query_subscribe_set_index used instead
2   void snd_seq_query_subscribe_set_index ( snd_seq_query_subscribe_t * info,int index)
        Set the subscriber's index to be queried.
          => Used in    :      alsaseq.c: _query_connections_list
          => Used in    :      alsaseq.c: _query_connections_list
EXC void snd_seq_query_subscribe_set_port ( snd_seq_query_subscribe_t * info,int port)
        Set the port id of a query_subscribe container.
          ==>    Excluded: snd_seq_query_subscribe_set_index used instead
1   void snd_seq_query_subscribe_set_root ( snd_seq_query_subscribe_t * info,const snd_seq_addr_t * addr)
        Set the client/port address of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections
1   void snd_seq_query_subscribe_set_type ( snd_seq_query_subscribe_t * info,snd_seq_query_subs_type_t type)
        Set the query type of a query_subscribe container.
          => Used in    :      alsaseq.c: _query_connections_list
EXC size_t snd_seq_query_subscribe_sizeof ( void )
        get size of snd_seq_query_subscribe_t
          ==>    Excluded: currently not used
1   int snd_seq_subscribe_port ( snd_seq_t * seq,snd_seq_port_subscribe_t * sub)
        subscribe a port connection
          => Used in    :      alsaseq.c: Sequencer_connect_ports
1   int snd_seq_unsubscribe_port ( snd_seq_t * seq,snd_seq_port_subscribe_t * sub)
        unsubscribe a connection between ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
STAT Sequencer Port Subscription    Functions   :   3 missing (  8%)  15 excluded ( 38%) of  40 total ( 92% covered).



STAT Sequencer Port Subscription    SUMMARY     :   3 missing (  7%)  15 excluded ( 33%) of  46 total ( 93% covered).





Sequencer Queue Interface
=========================



Defines
-------
N/A #define SND_SEQ_QUEUE_DIRECT 253
        special queue ids direct dispatch
          **** NOT AVAILABLE/USED SND_SEQ_QUEUE_DIRECT ****
N/A #define snd_seq_queue_info_alloca ( ptr ) __snd_alloca(ptr, snd_seq_queue_info)
        allocate a snd_seq_queue_info_t container on stack
          **** NOT AVAILABLE/USED snd_seq_queue_info_alloca ****
N/A #define snd_seq_queue_status_alloca ( ptr ) __snd_alloca(ptr, snd_seq_queue_status)
        allocate a snd_seq_queue_status_t container on stack
          **** NOT AVAILABLE/USED snd_seq_queue_status_alloca ****
1   #define snd_seq_queue_tempo_alloca ( ptr ) __snd_alloca(ptr, snd_seq_queue_tempo)
        allocate a snd_seq_queue_tempo_t container on stack
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A #define snd_seq_queue_timer_alloca ( ptr ) __snd_alloca(ptr, snd_seq_queue_timer)
        allocate a snd_seq_queue_timer_t container on stack
          **** NOT AVAILABLE/USED snd_seq_queue_timer_alloca ****
STAT Sequencer Queue Interface      Defines     :   4 missing ( 80%)   0 excluded (  0%) of   5 total ( 20% covered).



Typedefs
--------
N/A typedef struct _snd_seq_queue_info snd_seq_queue_info_t
        queue information container
          **** NOT AVAILABLE/USED snd_seq_queue_info_t ****
N/A typedef struct _snd_seq_queue_status snd_seq_queue_status_t
        queue status container
          **** NOT AVAILABLE/USED snd_seq_queue_status_t ****
1   typedef struct _snd_seq_queue_tempo snd_seq_queue_tempo_t
        queue tempo container
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A typedef struct _snd_seq_queue_timer snd_seq_queue_timer_t
        queue timer information container
          **** NOT AVAILABLE/USED snd_seq_queue_timer_t ****
STAT Sequencer Queue Interface      Typedefs    :   3 missing ( 75%)   0 excluded (  0%) of   4 total ( 25% covered).



Functions
---------
1   enum snd_seq_queue_timer_type_tint snd_seq_alloc_named_queue ( snd_seq_t * seq,const char * name)
        allocate a queue with the specified name
          => Used in    :      alsaseq.c: Sequencer_create_queue
1   int snd_seq_alloc_queue ( snd_seq_t * seq )
        allocate a queue
          => Used in    :      alsaseq.c: Sequencer_create_queue
N/A int snd_seq_create_queue ( snd_seq_t * seq,snd_seq_queue_info_t * info)
        create a queue
          **** NOT AVAILABLE/USED snd_seq_create_queue ****
1   int snd_seq_free_queue ( snd_seq_t * seq,int q)
        delete the specified queue
          => Used in    :      alsaseq.c: Sequencer_delete_queue
N/A int snd_seq_get_queue_info ( snd_seq_t * seq,int q,snd_seq_queue_info_t * info)
        obtain queue attributes
          **** NOT AVAILABLE/USED snd_seq_get_queue_info ****
N/A int snd_seq_get_queue_status ( snd_seq_t * seq,int q,snd_seq_queue_status_t * status)
        obtain the running state of the queue
          **** NOT AVAILABLE/USED snd_seq_get_queue_status ****
1   int snd_seq_get_queue_tempo ( snd_seq_t * seq,int q,snd_seq_queue_tempo_t * tempo)
        obtain the current tempo of the queue
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A int snd_seq_get_queue_timer ( snd_seq_t * seq,int q,snd_seq_queue_timer_t * timer)
        obtain the queue timer information
          **** NOT AVAILABLE/USED snd_seq_get_queue_timer ****
N/A int snd_seq_get_queue_usage ( snd_seq_t * seq,int q)
        Get the queue usage flag to the client.
          **** NOT AVAILABLE/USED snd_seq_get_queue_usage ****
N/A int snd_seq_query_named_queue ( snd_seq_t * seq,const char * name)
        query the matching queue with the specified name
          **** NOT AVAILABLE/USED snd_seq_query_named_queue ****
N/A void snd_seq_queue_info_copy ( snd_seq_queue_info_t * dst,const snd_seq_queue_info_t * src)
        copy one snd_seq_queue_info_t to another
          **** NOT AVAILABLE/USED snd_seq_queue_info_copy ****
N/A void snd_seq_queue_info_free ( snd_seq_queue_info_t * obj )
        frees a previously allocated snd_seq_queue_info_t
          **** NOT AVAILABLE/USED snd_seq_queue_info_free ****
N/A unsigned int snd_seq_queue_info_get_flags ( const snd_seq_queue_info_t * info )
        Get the conditional bit flags of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_get_flags ****
N/A int snd_seq_queue_info_get_locked ( const snd_seq_queue_info_t * info )
        Get the lock status of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_get_locked ****
N/A const char* snd_seq_queue_info_get_name ( const snd_seq_queue_info_t * info )
        Get the name of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_get_name ****
N/A int snd_seq_queue_info_get_owner ( const snd_seq_queue_info_t * info )
        Get the owner client id of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_get_owner ****
N/A int snd_seq_queue_info_get_queue ( const snd_seq_queue_info_t * info )
        Get the queue id of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_get_queue ****
N/A int snd_seq_queue_info_malloc ( snd_seq_queue_info_t ** ptr )
        allocate an empty snd_seq_queue_info_t using standard malloc
          **** NOT AVAILABLE/USED snd_seq_queue_info_malloc ****
N/A void snd_seq_queue_info_set_flags ( snd_seq_queue_info_t * info,unsigned int flags)
        Set the conditional bit flags of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_set_flags ****
N/A void snd_seq_queue_info_set_locked ( snd_seq_queue_info_t * info,int locked)
        Set the lock status of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_set_locked ****
N/A void snd_seq_queue_info_set_name ( snd_seq_queue_info_t * info,const char * name)
        Set the name of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_set_name ****
N/A void snd_seq_queue_info_set_owner ( snd_seq_queue_info_t * info,int owner)
        Set the owner client id of a queue_info container.
          **** NOT AVAILABLE/USED snd_seq_queue_info_set_owner ****
N/A size_t snd_seq_queue_info_sizeof ( void )
        get size of snd_seq_queue_info_t
          **** NOT AVAILABLE/USED snd_seq_queue_info_sizeof ****
N/A void snd_seq_queue_status_copy ( snd_seq_queue_status_t * dst,const snd_seq_queue_status_t * src)
        copy one snd_seq_queue_status_t to another
          **** NOT AVAILABLE/USED snd_seq_queue_status_copy ****
N/A void snd_seq_queue_status_free ( snd_seq_queue_status_t * obj )
        frees a previously allocated snd_seq_queue_status_t
          **** NOT AVAILABLE/USED snd_seq_queue_status_free ****
N/A int snd_seq_queue_status_get_events ( const snd_seq_queue_status_t * info )
        Get the number of events of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_status_get_events ****
N/A int snd_seq_queue_status_get_queue ( const snd_seq_queue_status_t * info )
        Get the queue id of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_status_get_queue ****
N/A const snd_seq_real_time_t* snd_seq_queue_status_get_real_time ( const snd_seq_queue_status_t * info)
        Get the real time of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_status_get_real_time ****
N/A unsigned int snd_seq_queue_status_get_status ( const snd_seq_queue_status_t * info )
        Get the running status bits of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_status_get_status ****
N/A snd_seq_tick_time_t snd_seq_queue_status_get_tick_time ( const snd_seq_queue_status_t * info )
        Get the tick time of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_status_get_tick_time ****
N/A int snd_seq_queue_status_malloc ( snd_seq_queue_status_t ** ptr )
        allocate an empty snd_seq_queue_status_t using standard malloc
          **** NOT AVAILABLE/USED snd_seq_queue_status_malloc ****
N/A size_t snd_seq_queue_status_sizeof ( void )
        get size of snd_seq_queue_status_t
          **** NOT AVAILABLE/USED snd_seq_queue_status_sizeof ****
N/A void snd_seq_queue_tempo_copy ( snd_seq_queue_tempo_t * dst,const snd_seq_queue_tempo_t * src)
        copy one snd_seq_queue_tempo_t to another
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_copy ****
N/A void snd_seq_queue_tempo_free ( snd_seq_queue_tempo_t * obj )
        frees a previously allocated snd_seq_queue_tempo_t
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_free ****
1   int snd_seq_queue_tempo_get_ppq ( const snd_seq_queue_tempo_t * info )
        Get the ppq of a queue_status container.
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A int snd_seq_queue_tempo_get_queue ( const snd_seq_queue_tempo_t * info )
        Get the queue id of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_get_queue ****
N/A unsigned int snd_seq_queue_tempo_get_skew ( const snd_seq_queue_tempo_t * info )
        Get the timer skew value of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_get_skew ****
N/A unsigned int snd_seq_queue_tempo_get_skew_base ( const snd_seq_queue_tempo_t * info )
        Get the timer skew base value of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_get_skew_base ****
1   unsigned int snd_seq_queue_tempo_get_tempo ( const snd_seq_queue_tempo_t * info )
        Get the tempo of a queue_status container.
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A int snd_seq_queue_tempo_malloc ( snd_seq_queue_tempo_t ** ptr )
        allocate an empty snd_seq_queue_tempo_t using standard malloc
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_malloc ****
1   void snd_seq_queue_tempo_set_ppq ( snd_seq_queue_tempo_t * info,int ppq)
        Set the ppq of a queue_status container.
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A void snd_seq_queue_tempo_set_skew ( snd_seq_queue_tempo_t * info,unsigned int skew)
        Set the timer skew value of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_set_skew ****
N/A void snd_seq_queue_tempo_set_skew_base ( snd_seq_queue_tempo_t * info,unsigned int base)
        Set the timer skew base value of a queue_status container.
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_set_skew_base ****
1   void snd_seq_queue_tempo_set_tempo ( snd_seq_queue_tempo_t * info,unsigned int tempo)
        Set the tempo of a queue_status container.
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A size_t snd_seq_queue_tempo_sizeof ( void )
        get size of snd_seq_queue_tempo_t
          **** NOT AVAILABLE/USED snd_seq_queue_tempo_sizeof ****
N/A void snd_seq_queue_timer_copy ( snd_seq_queue_timer_t * dst,const snd_seq_queue_timer_t * src)
        copy one snd_seq_queue_timer_t to another
          **** NOT AVAILABLE/USED snd_seq_queue_timer_copy ****
N/A void snd_seq_queue_timer_free ( snd_seq_queue_timer_t * obj )
        frees a previously allocated snd_seq_queue_timer_t
          **** NOT AVAILABLE/USED snd_seq_queue_timer_free ****
N/A const snd_timer_id_t* snd_seq_queue_timer_get_id ( const snd_seq_queue_timer_t * info )
        Get the timer id of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_get_id ****
N/A int snd_seq_queue_timer_get_queue ( const snd_seq_queue_timer_t * info )
        Get the queue id of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_get_queue ****
N/A unsigned int snd_seq_queue_timer_get_resolution ( const snd_seq_queue_timer_t * info )
        Get the timer resolution of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_get_resolution ****
N/A snd_seq_queue_timer_type_t snd_seq_queue_timer_get_type ( const snd_seq_queue_timer_t * info )
        Get the timer type of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_get_type ****
N/A int snd_seq_queue_timer_malloc ( snd_seq_queue_timer_t ** ptr )
        allocate an empty snd_seq_queue_timer_t using standard malloc
          **** NOT AVAILABLE/USED snd_seq_queue_timer_malloc ****
N/A void snd_seq_queue_timer_set_id ( snd_seq_queue_timer_t * info,const snd_timer_id_t * id)
        Set the timer id of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_set_id ****
N/A void snd_seq_queue_timer_set_resolution ( snd_seq_queue_timer_t * info,unsigned int resolution)
        Set the timer resolution of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_set_resolution ****
N/A void snd_seq_queue_timer_set_type ( snd_seq_queue_timer_t * info,snd_seq_queue_timer_type_t type)
        Set the timer type of a queue_timer container.
          **** NOT AVAILABLE/USED snd_seq_queue_timer_set_type ****
N/A size_t snd_seq_queue_timer_sizeof ( void )
        get size of snd_seq_queue_timer_t
          **** NOT AVAILABLE/USED snd_seq_queue_timer_sizeof ****
N/A int snd_seq_set_queue_info ( snd_seq_t * seq,int q,snd_seq_queue_info_t * info)
        change the queue attributes
          **** NOT AVAILABLE/USED snd_seq_set_queue_info ****
1   int snd_seq_set_queue_tempo ( snd_seq_t * seq,int q,snd_seq_queue_tempo_t * tempo)
        set the tempo of the queue
          => Used in    :      alsaseq.c: Sequencer_queue_tempo
N/A int snd_seq_set_queue_timer ( snd_seq_t * seq,int q,snd_seq_queue_timer_t * timer)
        set the queue timer information
          **** NOT AVAILABLE/USED snd_seq_set_queue_timer ****
N/A int snd_seq_set_queue_usage ( snd_seq_t * seq,int q,int used)
        Set the queue usage flag to the client.
          **** NOT AVAILABLE/USED snd_seq_set_queue_usage ****
STAT Sequencer Queue Interface      Functions   :  51 missing ( 85%)   0 excluded (  0%) of  60 total ( 15% covered).



STAT Sequencer Queue Interface      SUMMARY     :  58 missing ( 84%)   0 excluded (  0%) of  69 total ( 16% covered).





Sequencer Event API
===================



Defines
-------
N/A #define SND_SEQ_REMOVE_DEST (1<<2)
        Restrict by destination q:client:port
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_DEST ****
N/A #define SND_SEQ_REMOVE_DEST_CHANNEL (1<<3)
        Restrict by channel
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_DEST_CHANNEL ****
N/A #define SND_SEQ_REMOVE_EVENT_TYPE (1<<7)
        Restrict to event type
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_EVENT_TYPE ****
N/A #define snd_seq_remove_events_alloca ( ptr ) __snd_alloca(ptr, snd_seq_remove_events)
        allocate a snd_seq_remove_events_t container on stack
          **** NOT AVAILABLE/USED snd_seq_remove_events_alloca ****
N/A #define SND_SEQ_REMOVE_IGNORE_OFF (1<<8)
        Do not flush off events
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_IGNORE_OFF ****
N/A #define SND_SEQ_REMOVE_INPUT (1<<0)
        Remove conditional flags Flush input queues
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_INPUT ****
N/A #define SND_SEQ_REMOVE_OUTPUT (1<<1)
        Flush output queues
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_OUTPUT ****
N/A #define SND_SEQ_REMOVE_TAG_MATCH (1<<9)
        Restrict to events with given tag
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_TAG_MATCH ****
N/A #define SND_SEQ_REMOVE_TIME_AFTER (1<<5)
        Restrict to time or after
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_TIME_AFTER ****
N/A #define SND_SEQ_REMOVE_TIME_BEFORE (1<<4)
        Restrict to before time
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_TIME_BEFORE ****
N/A #define SND_SEQ_REMOVE_TIME_TICK (1<<6)
        Time is in ticks
          **** NOT AVAILABLE/USED SND_SEQ_REMOVE_TIME_TICK ****
STAT Sequencer Event API            Defines     :  11 missing (100%)   0 excluded (  0%) of  11 total (  0% covered).



Typedefs
--------
N/A typedef struct _snd_seq_remove_events snd_seq_remove_events_t
        event removal conditionals
          **** NOT AVAILABLE/USED snd_seq_remove_events_t ****
STAT Sequencer Event API            Typedefs    :   1 missing (100%)   0 excluded (  0%) of   1 total (  0% covered).



Functions
---------
1   int snd_seq_drain_output ( snd_seq_t * seq )
        drain output buffer to sequencer
          => Used in    :      alsaseq.c: Sequencer_drain_output
N/A int snd_seq_drop_input ( snd_seq_t * seq )
        clear input buffer and and remove events in sequencer queue
          **** NOT AVAILABLE/USED snd_seq_drop_input ****
N/A int snd_seq_drop_input_buffer ( snd_seq_t * seq )
        remove all events on user-space input FIFO
          **** NOT AVAILABLE/USED snd_seq_drop_input_buffer ****
N/A int snd_seq_drop_output ( snd_seq_t * seq )
        remove all events on output buffer
          **** NOT AVAILABLE/USED snd_seq_drop_output ****
N/A int snd_seq_drop_output_buffer ( snd_seq_t * seq )
        remove all events on user-space output buffer
          **** NOT AVAILABLE/USED snd_seq_drop_output_buffer ****
1   int snd_seq_event_input ( snd_seq_t * seq,snd_seq_event_t ** ev)
        retrieve an event from sequencer
          => Used in    :      alsaseq.c: Sequencer_receive_events
N/A int snd_seq_event_input_pending ( snd_seq_t * seq,int fetch_sequencer)
        check events in input buffer
          **** NOT AVAILABLE/USED snd_seq_event_input_pending ****
N/A ssize_t snd_seq_event_length ( snd_seq_event_t * ev )
        calculates the (encoded) byte-stream size of the event
          **** NOT AVAILABLE/USED snd_seq_event_length ****
1   int snd_seq_event_output ( snd_seq_t * seq,snd_seq_event_t * ev)
        output an event
          => Used in    :      alsaseq.c: Sequencer_output_event
N/A int snd_seq_event_output_buffer ( snd_seq_t * seq,snd_seq_event_t * ev)
        output an event onto the lib buffer without draining buffer
          **** NOT AVAILABLE/USED snd_seq_event_output_buffer ****
N/A int snd_seq_event_output_direct ( snd_seq_t * seq,snd_seq_event_t * ev)
        output an event directly to the sequencer NOT through output buffer
          **** NOT AVAILABLE/USED snd_seq_event_output_direct ****
N/A int snd_seq_event_output_pending ( snd_seq_t * seq )
        return the size of pending events on output buffer
          **** NOT AVAILABLE/USED snd_seq_event_output_pending ****
N/A int snd_seq_extract_output ( snd_seq_t * seq,snd_seq_event_t ** ev_res)
        extract the first event in output buffer
          **** NOT AVAILABLE/USED snd_seq_extract_output ****
N/A int snd_seq_free_event ( snd_seq_event_t * ev )
        (DEPRECATED) free an event
          **** NOT AVAILABLE/USED snd_seq_free_event ****
N/A int snd_seq_remove_events ( snd_seq_t * seq,snd_seq_remove_events_t * rmp)
        remove events on input/output buffers and pools
          **** NOT AVAILABLE/USED snd_seq_remove_events ****
N/A void snd_seq_remove_events_copy ( snd_seq_remove_events_t * dst,const snd_seq_remove_events_t * src)
        copy one snd_seq_remove_events_t to another
          **** NOT AVAILABLE/USED snd_seq_remove_events_copy ****
N/A void snd_seq_remove_events_free ( snd_seq_remove_events_t * obj )
        frees a previously allocated snd_seq_remove_events_t
          **** NOT AVAILABLE/USED snd_seq_remove_events_free ****
N/A int snd_seq_remove_events_get_channel ( const snd_seq_remove_events_t * info )
        Get the event channel as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_channel ****
N/A unsigned int snd_seq_remove_events_get_condition ( const snd_seq_remove_events_t * info )
        Get the removal condition bits.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_condition ****
N/A const snd_seq_addr_t* snd_seq_remove_events_get_dest ( const snd_seq_remove_events_t * info )
        Get the event destination address as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_dest ****
N/A int snd_seq_remove_events_get_event_type ( const snd_seq_remove_events_t * info )
        Get the event type as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_event_type ****
N/A int snd_seq_remove_events_get_queue ( const snd_seq_remove_events_t * info )
        Get the queue as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_queue ****
N/A int snd_seq_remove_events_get_tag ( const snd_seq_remove_events_t * info )
        Get the event tag id as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_tag ****
N/A const snd_seq_timestamp_t* snd_seq_remove_events_get_time ( const snd_seq_remove_events_t * info )
        Get the event timestamp as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_get_time ****
N/A int snd_seq_remove_events_malloc ( snd_seq_remove_events_t ** ptr )
        allocate an empty snd_seq_remove_events_t using standard malloc
          **** NOT AVAILABLE/USED snd_seq_remove_events_malloc ****
N/A void snd_seq_remove_events_set_channel ( snd_seq_remove_events_t * info,int channel)
        Set the channel as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_channel ****
N/A void snd_seq_remove_events_set_condition ( snd_seq_remove_events_t * info,unsigned int flags)
        Set the removal condition bits.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_condition ****
N/A void snd_seq_remove_events_set_dest ( snd_seq_remove_events_t * info,const snd_seq_addr_t * addr)
        Set the destination address as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_dest ****
N/A void snd_seq_remove_events_set_event_type ( snd_seq_remove_events_t * info,int type)
        Set the event type as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_event_type ****
N/A void snd_seq_remove_events_set_queue ( snd_seq_remove_events_t * info,int queue)
        Set the queue as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_queue ****
N/A void snd_seq_remove_events_set_tag ( snd_seq_remove_events_t * info,int tag)
        Set the event tag as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_tag ****
N/A void snd_seq_remove_events_set_time ( snd_seq_remove_events_t * info,const snd_seq_timestamp_t * time)
        Set the timestamp as removal condition.
          **** NOT AVAILABLE/USED snd_seq_remove_events_set_time ****
N/A size_t snd_seq_remove_events_sizeof ( void )
        get size of snd_seq_remove_events_t
          **** NOT AVAILABLE/USED snd_seq_remove_events_sizeof ****
STAT Sequencer Event API            Functions   :  30 missing ( 91%)   0 excluded (  0%) of  33 total (  9% covered).



STAT Sequencer Event API            SUMMARY     :  42 missing ( 93%)   0 excluded (  0%) of  45 total (  7% covered).





Sequencer Miscellaneous
=======================



STAT Sequencer Miscellaneous        SUMMARY     :   0 missing ( N/A)   0 excluded ( N/A) of   0 total ( N/A covered).





Sequencer Event Type Checks
===========================



Defines
-------
N/A #define _SND_SEQ_TYPE ( x ) (1<<(x))
        master type - 24bit
          **** NOT AVAILABLE/USED _SND_SEQ_TYPE ****
N/A #define _SND_SEQ_TYPE_OPT ( x ) ((x)<<24)
        optional type - 8bit
          **** NOT AVAILABLE/USED _SND_SEQ_TYPE_OPT ****
2   #define snd_seq_ev_is_abstime ( ev ) (snd_seq_ev_timemode_type(ev) == SND_SEQ_TIME_MODE_ABS)
        scheduled in absolute time
          => Used in    :      alsaseq.c: SeqEvent_get_timemode
          => Used in    :      alsaseq.c: SeqEvent_is_abstime
1   #define snd_seq_ev_is_channel_type ( ev ) (snd_seq_event_types[(ev)->type] &(_SND_SEQ_TYPE(SND_SEQ_EVFLG_NOTE) | _SND_SEQ_TYPE(SND_SEQ_EVFLG_CONTROL)))
        event type check: channel specific events
          => Used in    :      alsaseq.c: SeqEvent_is_channel_type
1   #define snd_seq_ev_is_control_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_CONTROL)
        event type check: control events
          => Used in    :      alsaseq.c: SeqEvent_is_control_type
1   #define snd_seq_ev_is_direct ( ev ) ((ev)->queue == SND_SEQ_QUEUE_DIRECT)
        direct dispatched events
          => Used in    :      alsaseq.c: SeqEvent_is_direct
1   #define snd_seq_ev_is_fixed ( ev ) (snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_FIXED)
        fixed length events
          => Used in    :      alsaseq.c: SeqEvent_is_fixed
2   #define snd_seq_ev_is_fixed_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_FIXED)
        event type check: fixed length events
          => Used in    :      alsaseq.c: _SeqEvent_set_type
          => Used in    :      alsaseq.c: SeqEvent_is_fixed_type
1   #define snd_seq_ev_is_instr_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_INSTR)
        event type check: instrument layer events
          => Used in    :      alsaseq.c: SeqEvent_is_instr_type
1   #define snd_seq_ev_is_message_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_MESSAGE)
        event type check: system status messages
          => Used in    :      alsaseq.c: SeqEvent_is_message_type
1   #define snd_seq_ev_is_note_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_NOTE)
        event type check: note events
          => Used in    :      alsaseq.c: SeqEvent_is_note_type
1   #define snd_seq_ev_is_prior ( ev ) (((ev)->flags & SND_SEQ_PRIORITY_MASK) == SND_SEQ_PRIORITY_HIGH)
        prior events
          => Used in    :      alsaseq.c: SeqEvent_is_prior
1   #define snd_seq_ev_is_queue_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_QUEUE)
        event type check: queue control events
          => Used in    :      alsaseq.c: SeqEvent_is_queue_type
5   #define snd_seq_ev_is_real ( ev ) (snd_seq_ev_timestamp_type(ev) == SND_SEQ_TIME_STAMP_REAL)
        event is in real-time
          => Used in    :      alsaseq.c: SeqEvent_get_timestamp
          => Used in    :      alsaseq.c: SeqEvent_get_time
          => Used in    :      alsaseq.c: SeqEvent_set_time
          => Used in    :      alsaseq.c: SeqEvent_is_real
          => Used in    :      alsaseq.c: SeqEvent_repr
2   #define snd_seq_ev_is_reltime ( ev ) (snd_seq_ev_timemode_type(ev) == SND_SEQ_TIME_MODE_REL)
        scheduled in relative time
          => Used in    :      alsaseq.c: SeqEvent_get_timemode
          => Used in    :      alsaseq.c: SeqEvent_is_reltime
1   #define snd_seq_ev_is_reserved ( ev ) (! snd_seq_event_types[(ev)->type])
        event type check: reserved for kernel
          => Used in    :      alsaseq.c: SeqEvent_is_reserved
1   #define snd_seq_ev_is_result_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_RESULT)
        event type check: result events
          => Used in    :      alsaseq.c: SeqEvent_is_result_type
1   #define snd_seq_ev_is_sample_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_SAMPLE)
        event type check: sample messages
          => Used in    :      alsaseq.c: SeqEvent_is_sample_type
1   #define snd_seq_ev_is_subscribe_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_CONNECTION)
        event type check: system status messages
          => Used in    :      alsaseq.c: SeqEvent_is_subscribe_type
4   #define snd_seq_ev_is_tick ( ev ) (snd_seq_ev_timestamp_type(ev) == SND_SEQ_TIME_STAMP_TICK)
        event is in tick time
          => Used in    :      alsaseq.c: SeqEvent_get_timestamp
          => Used in    :      alsaseq.c: SeqEvent_get_time
          => Used in    :      alsaseq.c: SeqEvent_set_time
          => Used in    :      alsaseq.c: SeqEvent_is_tick
1   #define snd_seq_ev_is_user_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_USERS)
        event type check: user-defined messages
          => Used in    :      alsaseq.c: SeqEvent_is_user_type
1   #define snd_seq_ev_is_variable ( ev ) (snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_VARIABLE)
        variable length events
          => Used in    :      alsaseq.c: SeqEvent_is_variable
3   #define snd_seq_ev_is_variable_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_VARIABLE)
        event type check: variable length events
          => Used in    :      alsaseq.c: _SeqEvent_set_type
          => Used in    :      alsaseq.c: SeqEvent_create
          => Used in    :      alsaseq.c: SeqEvent_is_variable_type
1   #define snd_seq_ev_is_varusr ( ev ) (snd_seq_ev_length_type(ev) == SND_SEQ_EVENT_LENGTH_VARUSR)
        variable length on user-space
          => Used in    :      alsaseq.c: SeqEvent_is_varusr
2   #define snd_seq_ev_is_varusr_type ( ev ) snd_seq_type_check(ev, SND_SEQ_EVFLG_VARUSR)
        event type check: user pointer events
          => Used in    :      alsaseq.c: _SeqEvent_set_type
          => Used in    :      alsaseq.c: SeqEvent_is_varusr_type
N/A #define snd_seq_ev_length_type ( ev ) ((ev)->flags & SND_SEQ_EVENT_LENGTH_MASK)
        get the data length type
          **** NOT AVAILABLE/USED snd_seq_ev_length_type ****
N/A #define snd_seq_ev_timemode_type ( ev ) ((ev)->flags & SND_SEQ_TIME_MODE_MASK)
        time-mode type
          **** NOT AVAILABLE/USED snd_seq_ev_timemode_type ****
N/A #define snd_seq_ev_timestamp_type ( ev ) ((ev)->flags & SND_SEQ_TIME_STAMP_MASK)
        time-stamp type
          **** NOT AVAILABLE/USED snd_seq_ev_timestamp_type ****
N/A #define snd_seq_type_check ( ev,x ) (snd_seq_event_types[(ev)->type] & _SND_SEQ_TYPE(x))
        check the event type
          **** NOT AVAILABLE/USED snd_seq_type_check ****
N/A const unsigned int snd_seq_event_types[]
        Event types conversion array
          **** NOT AVAILABLE/USED unsigned ****
STAT Sequencer Event Type Checks    Defines     :   7 missing ( 23%)   0 excluded (  0%) of  30 total ( 77% covered).



STAT Sequencer Event Type Checks    SUMMARY     :   7 missing ( 23%)   0 excluded (  0%) of  30 total ( 77% covered).





Sequencer Event Definitions
===========================



Defines
-------
N/A #define SND_SEQ_EVENT_LENGTH_FIXED (0<<2)
        fixed event size
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_LENGTH_FIXED ****
N/A #define SND_SEQ_EVENT_LENGTH_MASK (3<<2)
        mask for event length bits
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_LENGTH_MASK ****
N/A #define SND_SEQ_EVENT_LENGTH_VARIABLE (1<<2)
        variable event size
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_LENGTH_VARIABLE ****
N/A #define SND_SEQ_EVENT_LENGTH_VARUSR (2<<2)
        variable event size - user memory space
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_LENGTH_VARUSR ****
N/A #define SND_SEQ_PRIORITY_HIGH (1<<4)
        event should be processed before others
          **** NOT AVAILABLE/USED SND_SEQ_PRIORITY_HIGH ****
N/A #define SND_SEQ_PRIORITY_MASK (1<<4)
        mask for priority bits
          **** NOT AVAILABLE/USED SND_SEQ_PRIORITY_MASK ****
N/A #define SND_SEQ_PRIORITY_NORMAL (0<<4)
        normal priority
          **** NOT AVAILABLE/USED SND_SEQ_PRIORITY_NORMAL ****
4   #define SND_SEQ_TIME_MODE_ABS (0<<1)
        absolute timestamp
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
          => Used in    :      alsaseq.c: SeqEvent_init
          => Used in    :      alsaseq.c: SeqEvent_get_timemode
2   #define SND_SEQ_TIME_MODE_MASK (1<<1)
        mask for time mode bits
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
3   #define SND_SEQ_TIME_MODE_REL (1<<1)
        relative to current time
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
          => Used in    :      alsaseq.c: _SeqEvent_set_timemode
          => Used in    :      alsaseq.c: SeqEvent_get_timemode
2   #define SND_SEQ_TIME_STAMP_MASK (1<<0)
        mask for timestamp bits
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
3   #define SND_SEQ_TIME_STAMP_REAL (1<<0)
        timestamp in real time
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
          => Used in    :      alsaseq.c: SeqEvent_get_timestamp
4   #define SND_SEQ_TIME_STAMP_TICK (0<<0)
        Event mode flags
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
          => Used in    :      alsaseq.c: _SeqEvent_set_timestamp
          => Used in    :      alsaseq.c: SeqEvent_init
          => Used in    :      alsaseq.c: SeqEvent_get_timestamp
STAT Sequencer Event Definitions    Defines     :   7 missing ( 54%)   0 excluded (  0%) of  13 total ( 46% covered).



Typedefs
--------
8   typedef struct snd_seq_addr snd_seq_addr_t
        Sequencer event address
          => Used in    :      alsaseq.c: SETDICT_ADDR1
          => Used in    :      alsaseq.c: SETDICT_ADDR2
          => Used in    :      alsaseq.c: _query_connections_list
          => Used in    :      alsaseq.c: _query_connections
          => Used in    :      alsaseq.c: Sequencer_connect_ports
          => Used in    :      alsaseq.c: Sequencer_disconnect_ports
          => Used in    :      alsaseq.c: Sequencer_get_connect_info
          => Used in    :      alsaseq.c: Sequencer_parse_address
1   typedef struct snd_seq_connect snd_seq_connect_t
        Connection (subscription) between ports
          => Used in    :      alsaseq.c: SETDICT_CONN4
3   typedef struct snd_seq_ev_ctrl snd_seq_ev_ctrl_t
        Controller event
          => Used in    :      alsaseq.c: SETDICT_CTRL1
          => Used in    :      alsaseq.c: SETDICT_CTRL2
          => Used in    :      alsaseq.c: SETDICT_CTRL3
1   typedef struct snd_seq_ev_ext snd_seq_ev_ext_t
        external stored data
          => Used in    :      alsaseq.c: SETDICT_EXT
2   typedef struct snd_seq_ev_note snd_seq_ev_note_t
        Note event
          => Used in    :      alsaseq.c: SETDICT_NOTE3
          => Used in    :      alsaseq.c: SETDICT_NOTE5
1   typedef struct snd_seq_ev_queue_control snd_seq_ev_queue_control_t
        queue timer control
          => Used in    :      alsaseq.c: SETDICT_QUEU1
N/A typedef struct snd_seq_ev_raw32 snd_seq_ev_raw32_t
        generic set of integers (3x32 bit)
          **** NOT AVAILABLE/USED snd_seq_ev_raw32_t ****
N/A typedef struct snd_seq_ev_raw8 snd_seq_ev_raw8_t
        generic set of bytes (12x8 bit)
          **** NOT AVAILABLE/USED snd_seq_ev_raw8_t ****
9   typedef struct snd_seq_event snd_seq_event_t
        Sequencer event
          => Used in    :      alsaseq.c: SeqEventObject
          => Used in    :      alsaseq.c: SeqEvent_init
          => Used in    :      alsaseq.c: SeqEvent_create
          => Used in    :      alsaseq.c: SeqEvent_create
          => Used in    :      alsaseq.c: SeqEvent_create
          => Used in    :      alsaseq.c: SeqEvent_new
          => Used in    :      alsaseq.c: SeqEvent_get_data
          => Used in    :      alsaseq.c: SeqEvent_set_data
          => Used in    :      alsaseq.c: Sequencer_receive_events
N/A typedef unsigned char snd_seq_event_type_t
        Sequencer event data type
          **** NOT AVAILABLE/USED snd_seq_event_type_t ****
N/A typedef struct snd_seq_queue_skew snd_seq_queue_skew_t
        Queue skew values
          **** NOT AVAILABLE/USED snd_seq_queue_skew_t ****
N/A typedef struct snd_seq_real_time snd_seq_real_time_t
        Real-time data record
          **** NOT AVAILABLE/USED snd_seq_real_time_t ****
1   typedef struct snd_seq_result snd_seq_result_t
        Result events
          => Used in    :      alsaseq.c: SETDICT_RESU2
N/A typedef unsigned int snd_seq_tick_time_t
        (MIDI) Tick-time data record
          **** NOT AVAILABLE/USED snd_seq_tick_time_t ****
N/A typedef union snd_seq_timestamp snd_seq_timestamp_t
        unioned time stamp
          **** NOT AVAILABLE/USED snd_seq_timestamp_t ****
STAT Sequencer Event Definitions    Typedefs    :   7 missing ( 47%)   0 excluded (  0%) of  15 total ( 53% covered).



Enumerations
------------
enum snd_seq_event_type
1   SND_SEQ_EVENT_SYSTEM
        system status; event data type = snd_seq_result_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_RESULT
        returned result status; event data type = snd_seq_result_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_NOTE
        note on and off with duration; event data type = snd_seq_ev_note_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_NOTEON
        note on; event data type = snd_seq_ev_note_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_NOTEOFF
        note off; event data type = snd_seq_ev_note_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_KEYPRESS
        key pressure change (aftertouch); event data type = snd_seq_ev_note_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CONTROLLER
        controller; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PGMCHANGE
        program change; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CHANPRESS
        channel pressure; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PITCHBEND
        pitchwheel; event data type = snd_seq_ev_ctrl_t; data is from -8192 to 8191)
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CONTROL14
        14 bit controller value; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_NONREGPARAM
        14 bit NRPN; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_REGPARAM
        14 bit RPN; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_SONGPOS
        SPP with LSB and MSB values; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_SONGSEL
        Song Select with song ID number; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_QFRAME
        midi time code quarter frame; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_TIMESIGN
        SMF Time Signature event; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_KEYSIGN
        SMF Key Signature event; event data type = snd_seq_ev_ctrl_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_START
        MIDI Real Time Start message; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CONTINUE
        MIDI Real Time Continue message; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_STOP
        MIDI Real Time Stop message; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_SETPOS_TICK
        Set tick queue position; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
N/A SND_SEQ_EVENT_SETPOS_TIME
        Set real-time queue position; event data type = snd_seq_ev_queue_control_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_SETPOS_TIME ****
1   SND_SEQ_EVENT_TEMPO
        (SMF) Tempo event; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CLOCK
        MIDI Real Time Clock message; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_TICK
        MIDI Real Time Tick message; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_QUEUE_SKEW
        Queue timer skew; event data type = snd_seq_ev_queue_control_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
N/A SND_SEQ_EVENT_SYNC_POS
        Sync position changed; event data type = snd_seq_ev_queue_control_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_SYNC_POS ****
1   SND_SEQ_EVENT_TUNE_REQUEST
        Tune request; event data type = none
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_RESET
        Reset to power-on state; event data type = none
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_SENSING
        Active sensing event; event data type = none
          => Used in    :      alsaseq.c: SeqEvent_get_data
N/A SND_SEQ_EVENT_ECHO
        Echo-back event; event data type = any type
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_ECHO ****
N/A SND_SEQ_EVENT_OSS
        OSS emulation raw event; event data type = any type
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_OSS ****
1   SND_SEQ_EVENT_CLIENT_START
        New client has connected; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CLIENT_EXIT
        Client has left the system; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_CLIENT_CHANGE
        Client status/info has changed; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PORT_START
        New port was created; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PORT_EXIT
        Port was deleted from system; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PORT_CHANGE
        Port status/info has changed; event data type = snd_seq_addr_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PORT_SUBSCRIBED
        Ports connected; event data type = snd_seq_connect_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
1   SND_SEQ_EVENT_PORT_UNSUBSCRIBED
        Ports disconnected; event data type = snd_seq_connect_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
N/A SND_SEQ_EVENT_USR0
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR0 ****
N/A SND_SEQ_EVENT_USR1
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR1 ****
N/A SND_SEQ_EVENT_USR2
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR2 ****
N/A SND_SEQ_EVENT_USR3
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR3 ****
N/A SND_SEQ_EVENT_USR4
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR4 ****
N/A SND_SEQ_EVENT_USR5
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR5 ****
N/A SND_SEQ_EVENT_USR6
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR6 ****
N/A SND_SEQ_EVENT_USR7
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR7 ****
N/A SND_SEQ_EVENT_USR8
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR8 ****
N/A SND_SEQ_EVENT_USR9
        user-defined event; event data type = any (fixed size)
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR9 ****
1   SND_SEQ_EVENT_SYSEX
        system exclusive data (variable length); event data type = snd_seq_ev_ext_t
          => Used in    :      alsaseq.c: SeqEvent_get_data
N/A SND_SEQ_EVENT_BOUNCE
        error event; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_BOUNCE ****
N/A SND_SEQ_EVENT_USR_VAR0
        reserved for user apps; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR_VAR0 ****
N/A SND_SEQ_EVENT_USR_VAR1
        reserved for user apps; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR_VAR1 ****
N/A SND_SEQ_EVENT_USR_VAR2
        reserved for user apps; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR_VAR2 ****
N/A SND_SEQ_EVENT_USR_VAR3
        reserved for user apps; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR_VAR3 ****
N/A SND_SEQ_EVENT_USR_VAR4
        reserved for user apps; event data type = snd_seq_ev_ext_t
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_USR_VAR4 ****
N/A SND_SEQ_EVENT_NONE
        NOP; ignored in any case
          **** NOT AVAILABLE/USED SND_SEQ_EVENT_NONE ****
STAT Sequencer Event Definitions    Enumerations:  21 missing ( 36%)   0 excluded (  0%) of  59 total ( 64% covered).



STAT Sequencer Event Definitions    SUMMARY     :  35 missing ( 40%)   0 excluded (  0%) of  87 total ( 60% covered).





Sequencer Middle Level Interface
================================



Defines
-------
N/A #define snd_seq_change_queue_tempo ( seq,q,tempo,ev ) snd_seq_control_queue(seq, q, SND_SEQ_EVENT_TEMPO, tempo, ev)
        change the tempo of the specified queue
          **** NOT AVAILABLE/USED snd_seq_change_queue_tempo ****
N/A #define snd_seq_continue_queue ( seq,q,ev ) snd_seq_control_queue(seq, q, SND_SEQ_EVENT_CONTINUE, 0, ev)
        continue the specified queue
          **** NOT AVAILABLE/USED snd_seq_continue_queue ****
1   #define snd_seq_ev_clear ( ev ) memset(ev, 0, sizeof(snd_seq_event_t))
        initialize event record
          => Used in    :      alsaseq.c: SeqEvent_new
N/A #define snd_seq_ev_schedule_real ( ev,q,relative,rtime )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_schedule_real ****
N/A #define snd_seq_ev_schedule_tick ( ev,q,relative,ttick )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_schedule_tick ****
N/A #define snd_seq_ev_set_broadcast ( ev )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_broadcast ****
N/A #define snd_seq_ev_set_chanpress ( ev,ch,val )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_chanpress ****
N/A #define snd_seq_ev_set_controller ( ev,ch,cc,val )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_controller ****
N/A #define snd_seq_ev_set_dest ( ev,c,p ) ((ev)->dest.client = (c), (ev)->dest.port = (p))
        set the explicit destination
          **** NOT AVAILABLE/USED snd_seq_ev_set_dest ****
1   #define snd_seq_ev_set_direct ( ev ) ((ev)->queue = SND_SEQ_QUEUE_DIRECT)
        set direct passing mode (without queued)
          => Used in    :      alsaseq.c: SeqEvent_init
1   #define snd_seq_ev_set_fixed ( ev )
        Value:
          => Used in    :      alsaseq.c: _SeqEvent_set_type
N/A #define snd_seq_ev_set_keypress ( ev,ch,key,vel )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_keypress ****
N/A #define snd_seq_ev_set_note ( ev,ch,key,vel,dur )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_note ****
N/A #define snd_seq_ev_set_noteoff ( ev,ch,key,vel )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_noteoff ****
N/A #define snd_seq_ev_set_noteon ( ev,ch,key,vel )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_noteon ****
N/A #define snd_seq_ev_set_pgmchange ( ev,ch,val )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_pgmchange ****
N/A #define snd_seq_ev_set_pitchbend ( ev,ch,val )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_pitchbend ****
N/A #define snd_seq_ev_set_priority ( ev,high_prior )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_priority ****
N/A #define snd_seq_ev_set_queue_continue ( ev,q ) snd_seq_ev_set_queue_control(ev, SND_SEQ_EVENT_CONTINUE, q, 0)
        set the stop queue event
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_continue ****
N/A #define snd_seq_ev_set_queue_control ( ev,typ,q,val )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_control ****
N/A #define snd_seq_ev_set_queue_pos_real ( ev,q,rtime )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_pos_real ****
N/A #define snd_seq_ev_set_queue_pos_tick ( ev,q,ttime )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_pos_tick ****
N/A #define snd_seq_ev_set_queue_start ( ev,q ) snd_seq_ev_set_queue_control(ev, SND_SEQ_EVENT_START, q, 0)
        set the start queue event
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_start ****
N/A #define snd_seq_ev_set_queue_stop ( ev,q ) snd_seq_ev_set_queue_control(ev, SND_SEQ_EVENT_STOP, q, 0)
        set the stop queue event
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_stop ****
N/A #define snd_seq_ev_set_queue_tempo ( ev,q,val ) snd_seq_ev_set_queue_control(ev, SND_SEQ_EVENT_TEMPO, q, val)
        set the stop queue event
          **** NOT AVAILABLE/USED snd_seq_ev_set_queue_tempo ****
N/A #define snd_seq_ev_set_source ( ev,p ) ((ev)->source.port = (p))
        set the source port
          **** NOT AVAILABLE/USED snd_seq_ev_set_source ****
1   #define snd_seq_ev_set_subs ( ev )
        Value:
          => Used in    :      alsaseq.c: SeqEvent_init
N/A #define snd_seq_ev_set_sysex ( ev,datalen,dataptr )
        Value:
          **** NOT AVAILABLE/USED snd_seq_ev_set_sysex ****
N/A #define snd_seq_ev_set_tag ( ev,t ) ((ev)->tag = (t))
        set the tag for given event
          **** NOT AVAILABLE/USED snd_seq_ev_set_tag ****
1   #define snd_seq_ev_set_variable ( ev,datalen,dataptr )
        Value:
          => Used in    :      alsaseq.c: _SeqEvent_set_type
1   #define snd_seq_ev_set_varusr ( ev,datalen,dataptr )
        Value:
          => Used in    :      alsaseq.c: _SeqEvent_set_type
1   #define snd_seq_start_queue ( seq,q,ev ) snd_seq_control_queue(seq, q, SND_SEQ_EVENT_START, 0, ev)
        start the specified queue
          => Used in    :      alsaseq.c: Sequencer_start_queue
N/A #define snd_seq_stop_queue ( seq,q,ev ) snd_seq_control_queue(seq, q, SND_SEQ_EVENT_STOP, 0, ev)
        stop the specified queue
          **** NOT AVAILABLE/USED snd_seq_stop_queue ****
STAT Sequencer Middle Level Interfa Defines     :  26 missing ( 79%)   0 excluded (  0%) of  33 total ( 21% covered).



Functions
---------
N/A int snd_seq_connect_from ( snd_seq_t * seq,int myport,int src_client,int src_port)
        simple subscription (w/o exclusive & time conversion)
          **** NOT AVAILABLE/USED snd_seq_connect_from ****
N/A int snd_seq_connect_to ( snd_seq_t * seq,int myport,int dest_client,int dest_port)
        simple subscription (w/o exclusive & time conversion)
          **** NOT AVAILABLE/USED snd_seq_connect_to ****
N/A int snd_seq_control_queue ( snd_seq_t * seq,int q,int type,int value,snd_seq_event_t * ev)
        queue controls - start/stop/continue
          **** NOT AVAILABLE/USED snd_seq_control_queue ****
1   int snd_seq_create_simple_port ( snd_seq_t * seq,const char * name,unsigned int caps,unsigned int type)
        create a port - simple version
          => Used in    :      alsaseq.c: Sequencer_create_simple_port
N/A int snd_seq_delete_simple_port ( snd_seq_t * seq,int port)
        delete the port
          **** NOT AVAILABLE/USED snd_seq_delete_simple_port ****
N/A int snd_seq_disconnect_from ( snd_seq_t * seq,int myport,int src_client,int src_port)
        simple disconnection
          **** NOT AVAILABLE/USED snd_seq_disconnect_from ****
N/A int snd_seq_disconnect_to ( snd_seq_t * seq,int myport,int dest_client,int dest_port)
        simple disconnection
          **** NOT AVAILABLE/USED snd_seq_disconnect_to ****
1   int snd_seq_parse_address ( snd_seq_t * seq,snd_seq_addr_t * addr,const char * arg)
        parse the given string and get the sequencer address
          => Used in    :      alsaseq.c: Sequencer_parse_address
N/A int snd_seq_reset_pool_input ( snd_seq_t * seq )
        reset client input pool
          **** NOT AVAILABLE/USED snd_seq_reset_pool_input ****
N/A int snd_seq_reset_pool_output ( snd_seq_t * seq )
        reset client output pool
          **** NOT AVAILABLE/USED snd_seq_reset_pool_output ****
N/A int snd_seq_set_client_event_filter ( snd_seq_t * seq,int event_type)
        add client event filter
          **** NOT AVAILABLE/USED snd_seq_set_client_event_filter ****
2   int snd_seq_set_client_name ( snd_seq_t * seq,const char * name)
        set client name
          => Used in    :      alsaseq.c: Sequencer_init
          => Used in    :      alsaseq.c: Sequencer_set_clientname
N/A int snd_seq_set_client_pool_input ( snd_seq_t * seq,size_t size)
        change the input pool size of the given client
          **** NOT AVAILABLE/USED snd_seq_set_client_pool_input ****
N/A int snd_seq_set_client_pool_output ( snd_seq_t * seq,size_t size)
        change the output pool size of the given client
          **** NOT AVAILABLE/USED snd_seq_set_client_pool_output ****
N/A int snd_seq_set_client_pool_output_room ( snd_seq_t * seq,size_t size)
        change the output room size of the given client
          **** NOT AVAILABLE/USED snd_seq_set_client_pool_output_room ****
1   int snd_seq_sync_output_queue ( snd_seq_t * seq )
        wait until all events are processed
          => Used in    :      alsaseq.c: Sequencer_sync_output_queue
STAT Sequencer Middle Level Interfa Functions   :  12 missing ( 75%)   0 excluded (  0%) of  16 total ( 25% covered).



STAT Sequencer Middle Level Interfa SUMMARY     :  38 missing ( 78%)   0 excluded (  0%) of  49 total ( 22% covered).





Sequencer event <-> MIDI byte stream coder
==========================================



Typedefs
--------
N/A typedef struct snd_midi_event snd_midi_event_t
        container for sequencer midi event parsers
          **** NOT AVAILABLE/USED snd_midi_event_t ****
STAT Sequencer event <-> MIDI byte  Typedefs    :   1 missing (100%)   0 excluded (  0%) of   1 total (  0% covered).



Functions
---------
N/A long snd_midi_event_decode ( snd_midi_event_t * dev,unsigned char * buf,long count,const snd_seq_event_t * ev)
        Decode sequencer event to MIDI byte stream.
          **** NOT AVAILABLE/USED snd_midi_event_decode ****
N/A long snd_midi_event_encode ( snd_midi_event_t * dev,const unsigned char * buf,long count,snd_seq_event_t * ev)
        Read bytes and encode to sequencer event if finished.
          **** NOT AVAILABLE/USED snd_midi_event_encode ****
N/A int snd_midi_event_encode_byte ( snd_midi_event_t * dev,int c,snd_seq_event_t * ev)
        Read one byte and encode to sequencer event if finished.
          **** NOT AVAILABLE/USED snd_midi_event_encode_byte ****
N/A void snd_midi_event_free ( snd_midi_event_t * dev )
        Free MIDI event parser.
          **** NOT AVAILABLE/USED snd_midi_event_free ****
N/A void snd_midi_event_init ( snd_midi_event_t * dev )
        Initializes MIDI parsers.
          **** NOT AVAILABLE/USED snd_midi_event_init ****
N/A int snd_midi_event_new ( size_t bufsize,snd_midi_event_t ** rdev)
        Initialize MIDI event parser.
          **** NOT AVAILABLE/USED snd_midi_event_new ****
N/A void snd_midi_event_no_status ( snd_midi_event_t * dev,int on)
        Enable/disable MIDI command merging.
          **** NOT AVAILABLE/USED snd_midi_event_no_status ****
N/A void snd_midi_event_reset_decode ( snd_midi_event_t * dev )
        Reset MIDI decode parser.
          **** NOT AVAILABLE/USED snd_midi_event_reset_decode ****
N/A void snd_midi_event_reset_encode ( snd_midi_event_t * dev )
        Reset MIDI encode parser.
          **** NOT AVAILABLE/USED snd_midi_event_reset_encode ****
N/A int snd_midi_event_resize_buffer ( snd_midi_event_t * dev,size_t bufsize)
        Resize MIDI message (event) buffer.
          **** NOT AVAILABLE/USED snd_midi_event_resize_buffer ****
STAT Sequencer event <-> MIDI byte  Functions   :  10 missing (100%)   0 excluded (  0%) of  10 total (  0% covered).



STAT Sequencer event <-> MIDI byte  SUMMARY     :  11 missing (100%)   0 excluded (  0%) of  11 total (  0% covered).





Mixer Interface
===============



Defines
-------
N/A #define snd_mixer_class_alloca ( ptr )
        allocate an invalid snd_mixer_class_t using standard alloca
          **** NOT AVAILABLE/USED snd_mixer_class_alloca ****
STAT Mixer Interface                Defines     :   1 missing (100%)   0 excluded (  0%) of   1 total (  0% covered).



Typedefs
--------
N/A typedef int(*) snd_mixer_callback_t(snd_mixer_t *ctl, unsigned int mask, snd_mixer_elem_t *elem)
        Mixer callback function.
          **** NOT AVAILABLE/USED snd_mixer_callback_t ****
N/A typedef struct _snd_mixer_class snd_mixer_class_t
        Mixer elements class handle
          **** NOT AVAILABLE/USED snd_mixer_class_t ****
N/A typedef int(*) snd_mixer_compare_t(const snd_mixer_elem_t *e1, const snd_mixer_elem_t *e2)
        Compare function for sorting mixer elements.
          **** NOT AVAILABLE/USED snd_mixer_compare_t ****
N/A typedef int(*) snd_mixer_elem_callback_t(snd_mixer_elem_t *elem, unsigned int mask)
        Mixer element callback function.
          **** NOT AVAILABLE/USED snd_mixer_elem_callback_t ****
3   typedef struct _snd_mixer_elem snd_mixer_elem_t
        Mixer element handle
          => Used in    :    alsamixer.c: element_callback
          => Used in    :    alsamixer.c: pyalsamixer_list
          => Used in    :    alsamixer.c: PYALSAMIXERELEMENT
N/A typedef enum _snd_mixer_elem_type snd_mixer_elem_type_t
        Mixer element type
          **** NOT AVAILABLE/USED snd_mixer_elem_type_t ****
N/A typedef int(*) snd_mixer_event_t(snd_mixer_class_t *class_, unsigned int mask, snd_hctl_elem_t*helem, snd_mixer_elem_t *melem)
        Event callback for the mixer class.
          **** NOT AVAILABLE/USED snd_mixer_event_t ****
2   typedef struct _snd_mixer snd_mixer_t
        Mixer handle
          => Used in    :    alsamixer.c: PYALSAMIXER
          => Used in    :    alsamixer.c: PYALSAMIXERELEMENT
STAT Mixer Interface                Typedefs    :   6 missing ( 75%)   0 excluded (  0%) of   8 total ( 25% covered).



Functions
---------
1   enum _snd_mixer_elem_typeint snd_mixer_attach ( snd_mixer_t * mixer,const char * name)
        Attach an HCTL specified with the CTL device name to an opened mixer.
          => Used in    :    alsamixer.c: pyalsamixer_attach
N/A int snd_mixer_attach_hctl ( snd_mixer_t * mixer,snd_hctl_t * hctl)
        Attach an HCTL to an opened mixer.
          **** NOT AVAILABLE/USED snd_mixer_attach_hctl ****
N/A void snd_mixer_class_copy ( snd_mixer_class_t * dst,const snd_mixer_class_t * src)
        copy one snd_mixer_class_t to another
          **** NOT AVAILABLE/USED snd_mixer_class_copy ****
N/A void snd_mixer_class_free ( snd_mixer_class_t * obj )
        frees a previously allocated snd_mixer_class_t
          **** NOT AVAILABLE/USED snd_mixer_class_free ****
N/A snd_mixer_compare_t snd_mixer_class_get_compare ( const snd_mixer_class_t * obj )
        Get mixer compare callback associated to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_get_compare ****
N/A snd_mixer_event_t snd_mixer_class_get_event ( const snd_mixer_class_t * obj )
        Get mixer event callback associated to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_get_event ****
N/A snd_mixer_t* snd_mixer_class_get_mixer ( const snd_mixer_class_t * obj )
        Get a mixer associated to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_get_mixer ****
N/A void* snd_mixer_class_get_private ( const snd_mixer_class_t * obj )
        Get mixer private data associated to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_get_private ****
N/A int snd_mixer_class_malloc ( snd_mixer_class_t ** ptr )
        allocate an invalid snd_mixer_class_t using standard malloc
          **** NOT AVAILABLE/USED snd_mixer_class_malloc ****
N/A int snd_mixer_class_register ( snd_mixer_class_t * class,snd_mixer_t * mixer)
        Register mixer element class.
          **** NOT AVAILABLE/USED snd_mixer_class_register ****
N/A int snd_mixer_class_set_compare ( snd_mixer_class_t * obj,snd_mixer_compare_t compare)
        Set mixer compare callback to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_set_compare ****
N/A int snd_mixer_class_set_event ( snd_mixer_class_t * obj,snd_mixer_event_t event)
        Set mixer event callback to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_set_event ****
N/A int snd_mixer_class_set_private ( snd_mixer_class_t * obj,void * private_data)
        Set mixer private data to given mixer class.
          **** NOT AVAILABLE/USED snd_mixer_class_set_private ****
N/A size_t snd_mixer_class_sizeof ( void )
        get size of snd_mixer_class_t
          **** NOT AVAILABLE/USED snd_mixer_class_sizeof ****
N/A int snd_mixer_class_unregister ( snd_mixer_class_t * class )
        Unregister mixer element class and remove all its elements.
          **** NOT AVAILABLE/USED snd_mixer_class_unregister ****
1   int snd_mixer_close ( snd_mixer_t * mixer )
        Close a mixer and free all related resources.
          => Used in    :    alsamixer.c: pyalsamixer_dealloc
N/A int snd_mixer_detach ( snd_mixer_t * mixer,const char * name)
        Detach a previously attached HCTL to an opened mixer freeing all related resources.
          **** NOT AVAILABLE/USED snd_mixer_detach ****
N/A int snd_mixer_detach_hctl ( snd_mixer_t * mixer,snd_hctl_t * hctl)
        Detach a previously attached HCTL to an opened mixer freeing all related resources.
          **** NOT AVAILABLE/USED snd_mixer_detach_hctl ****
N/A int snd_mixer_elem_add ( snd_mixer_elem_t * elem,snd_mixer_class_t * class)
        Add an element for a registered mixer element class.
          **** NOT AVAILABLE/USED snd_mixer_elem_add ****
N/A int snd_mixer_elem_attach ( snd_mixer_elem_t * melem,snd_hctl_elem_t * helem)
        Attach an HCTL element to a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_attach ****
N/A int snd_mixer_elem_detach ( snd_mixer_elem_t * melem,snd_hctl_elem_t * helem)
        Detach an HCTL element from a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_detach ****
N/A int snd_mixer_elem_empty ( snd_mixer_elem_t * melem )
        Return true if a mixer element does not contain any HCTL elements.
          **** NOT AVAILABLE/USED snd_mixer_elem_empty ****
N/A void snd_mixer_elem_free ( snd_mixer_elem_t * elem )
        Free a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_free ****
N/A void* snd_mixer_elem_get_callback_private ( const snd_mixer_elem_t * mixer )
        Get callback private value for a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_get_callback_private ****
N/A void* snd_mixer_elem_get_private ( const snd_mixer_elem_t * elem )
        Get private data associated to give mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_get_private ****
N/A snd_mixer_elem_type_t snd_mixer_elem_get_type ( const snd_mixer_elem_t * mixer )
        Get type for a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_get_type ****
N/A int snd_mixer_elem_info ( snd_mixer_elem_t * elem )
        Mixer element informations are changed.
          **** NOT AVAILABLE/USED snd_mixer_elem_info ****
N/A int snd_mixer_elem_new ( snd_mixer_elem_t ** elem,snd_mixer_elem_type_t type,int compare_weight,void * private_data,void(*)(snd_mixer_elem_t *elem) private_free)
        Allocate a new mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_new ****
1   snd_mixer_elem_t* snd_mixer_elem_next ( snd_mixer_elem_t * elem )
        get next mixer element
          => Used in    :    alsamixer.c: pyalsamixer_list
N/A snd_mixer_elem_t* snd_mixer_elem_prev ( snd_mixer_elem_t * elem )
        get previous mixer element
          **** NOT AVAILABLE/USED snd_mixer_elem_prev ****
N/A int snd_mixer_elem_remove ( snd_mixer_elem_t * elem )
        Remove a mixer element.
          **** NOT AVAILABLE/USED snd_mixer_elem_remove ****
3   void snd_mixer_elem_set_callback ( snd_mixer_elem_t * mixer,snd_mixer_elem_callback_t val)
        Set callback function for a mixer element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setcallback
          => Used in    :    alsamixer.c: pyalsamixerelement_setcallback
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
1   void snd_mixer_elem_set_callback_private ( snd_mixer_elem_t * mixer,void * val)
        Set callback private value for a mixer element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setcallback
N/A int snd_mixer_elem_value ( snd_mixer_elem_t * elem )
        Mixer element values is changed.
          **** NOT AVAILABLE/USED snd_mixer_elem_value ****
1   snd_mixer_elem_t* snd_mixer_first_elem ( snd_mixer_t * mixer )
        get first element for a mixer
          => Used in    :    alsamixer.c: pyalsamixer_list
1   void snd_mixer_free ( snd_mixer_t * mixer )
        Unload all mixer elements and free all related resources.
          => Used in    :    alsamixer.c: pyalsamixer_free
N/A void* snd_mixer_get_callback_private ( const snd_mixer_t * mixer )
        Get callback private value for a mixer.
          **** NOT AVAILABLE/USED snd_mixer_get_callback_private ****
2   unsigned int snd_mixer_get_count ( const snd_mixer_t * mixer )
        Get elements count for a mixer.
          => Used in    :    alsamixer.c: pyalsamixer_getcount
          => Used in    :    alsamixer.c: pyalsamixer_list
N/A int snd_mixer_get_hctl ( snd_mixer_t * mixer,const char * name,snd_hctl_t ** hctl)
        Obtain a HCTL pointer associated to given name.
          **** NOT AVAILABLE/USED snd_mixer_get_hctl ****
1   int snd_mixer_handle_events ( snd_mixer_t * mixer )
        Handle pending mixer events invoking callbacks.
          => Used in    :    alsamixer.c: pyalsamixer_handleevents
N/A snd_mixer_elem_t* snd_mixer_last_elem ( snd_mixer_t * mixer )
        get last element for a mixer
          **** NOT AVAILABLE/USED snd_mixer_last_elem ****
1   int snd_mixer_load ( snd_mixer_t * mixer )
        Load a mixer elements.
          => Used in    :    alsamixer.c: pyalsamixer_load
1   int snd_mixer_open ( snd_mixer_t ** mixerp,int mode)
        Opens an empty mixer.
          => Used in    :    alsamixer.c: pyalsamixer_init
1   int snd_mixer_poll_descriptors ( snd_mixer_t * mixer,struct pollfd * pfds,unsigned int space)
        get poll descriptors
          => Used in    :    alsamixer.c: pyalsamixer_registerpoll
1   int snd_mixer_poll_descriptors_count ( snd_mixer_t * mixer )
        get count of poll descriptors for mixer handle
          => Used in    :    alsamixer.c: pyalsamixer_registerpoll
N/A int snd_mixer_poll_descriptors_revents ( snd_mixer_t * mixer,struct pollfd * pfds,unsigned int nfds,unsigned short * revents)
        get returned events from poll descriptors
          **** NOT AVAILABLE/USED snd_mixer_poll_descriptors_revents ****
N/A void snd_mixer_set_callback ( snd_mixer_t * obj,snd_mixer_callback_t val)
        Set callback function for a mixer.
          **** NOT AVAILABLE/USED snd_mixer_set_callback ****
N/A void snd_mixer_set_callback_private ( snd_mixer_t * mixer,void * val)
        Set callback private value for a mixer.
          **** NOT AVAILABLE/USED snd_mixer_set_callback_private ****
N/A int snd_mixer_set_compare ( snd_mixer_t * mixer,snd_mixer_compare_t compare)
        Change mixer compare function and reorder elements.
          **** NOT AVAILABLE/USED snd_mixer_set_compare ****
N/A int snd_mixer_wait ( snd_mixer_t * mixer,int timeout)
        Wait for a mixer to become ready (i.e. at least one event pending).
          **** NOT AVAILABLE/USED snd_mixer_wait ****
STAT Mixer Interface                Functions   :  37 missing ( 74%)   0 excluded (  0%) of  50 total ( 26% covered).



STAT Mixer Interface                SUMMARY     :  44 missing ( 75%)   0 excluded (  0%) of  59 total ( 25% covered).





Simple Mixer Interface
======================



Defines
-------
1   #define snd_mixer_selem_id_alloca ( ptr )
        allocate an invalid snd_mixer_selem_id_t using standard alloca
          => Used in    :    alsamixer.c: pyalsamixerelement_init
STAT Simple Mixer Interface         Defines     :   0 missing (  0%)   0 excluded (  0%) of   1 total (100% covered).



Typedefs
--------
N/A typedef enum _snd_mixer_selem_channel_id snd_mixer_selem_channel_id_t
        Mixer simple element channel identifier
          **** NOT AVAILABLE/USED snd_mixer_selem_channel_id_t ****
1   typedef struct _snd_mixer_selem_id snd_mixer_selem_id_t
        Mixer simple element identifier
          => Used in    :    alsamixer.c: pyalsamixerelement_init
STAT Simple Mixer Interface         Typedefs    :   1 missing ( 50%)   0 excluded (  0%) of   2 total ( 50% covered).



Enumerations
------------
enum _snd_mixer_selem_channel_id
1   SND_MIXER_SCHN_UNKNOWN
        Unknown
          => As constant:    alsamixer.c: channel_id["UNKNOWN"]
1   SND_MIXER_SCHN_FRONT_LEFT
        Front left
          => As constant:    alsamixer.c: channel_id["FRONT_LEFT"]
1   SND_MIXER_SCHN_FRONT_RIGHT
        Front right
          => As constant:    alsamixer.c: channel_id["FRONT_RIGHT"]
1   SND_MIXER_SCHN_REAR_LEFT
        Rear left
          => As constant:    alsamixer.c: channel_id["REAR_LEFT"]
1   SND_MIXER_SCHN_REAR_RIGHT
        Rear right
          => As constant:    alsamixer.c: channel_id["REAR_RIGHT"]
1   SND_MIXER_SCHN_FRONT_CENTER
        Front center
          => As constant:    alsamixer.c: channel_id["FRONT_CENTER"]
1   SND_MIXER_SCHN_WOOFER
        Woofer
          => As constant:    alsamixer.c: channel_id["WOOFER"]
1   SND_MIXER_SCHN_SIDE_LEFT
        Side Left
          => As constant:    alsamixer.c: channel_id["SIDE_LEFT"]
1   SND_MIXER_SCHN_SIDE_RIGHT
        Side Right
          => As constant:    alsamixer.c: channel_id["SIDE_RIGHT"]
1   SND_MIXER_SCHN_REAR_CENTER
        Rear Center
          => As constant:    alsamixer.c: channel_id["REAR_CENTER"]
14  SND_MIXER_SCHN_MONO
        Mono (Front left alias)
          => As constant:    alsamixer.c: channel_id["MONO"]
          => Used in    :    alsamixer.c: pyalsamixerelement_haschannel
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumedb
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumedb
enum snd_mixer_selem_regopt_abstract
1   SND_MIXER_SABSTRACT_NONE
        no abstraction - try use all universal controls from driver
          => As constant:    alsamixer.c: regopt_abstract["NONE"]
1   SND_MIXER_SABSTRACT_BASIC
        basic abstraction - Master,PCM,CD,Aux,Record-Gain etc.
          => As constant:    alsamixer.c: regopt_abstract["BASIC"]
STAT Simple Mixer Interface         Enumerations:   0 missing (  0%)   0 excluded (  0%) of  13 total (100% covered).



Functions
---------
1   snd_mixer_elem_t* snd_mixer_find_selem ( snd_mixer_t * mixer,const snd_mixer_selem_id_t * id)
        Find a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_init
1   const char* snd_mixer_selem_channel_name ( snd_mixer_selem_channel_id_t channel )
        Return name of mixer simple element channel.
          => Used in    :    alsamixer.c: add_space1
1   int snd_mixer_selem_get_capture_dB ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long * value)
        Return value of capture volume in dB control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumedb
1   int snd_mixer_selem_get_capture_dB_range ( snd_mixer_elem_t * elem,long * min,long * max)
        Get range in dB for capture volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getrangedb
1   int snd_mixer_selem_get_capture_group ( snd_mixer_elem_t * elem )
        Return info about capture switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getcapgroup
3   int snd_mixer_selem_get_capture_switch ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,int * value)
        Return value of capture switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
5   int snd_mixer_selem_get_capture_volume ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long * value)
        Return value of capture volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
1   int snd_mixer_selem_get_capture_volume_range ( snd_mixer_elem_t * elem,long * min,long * max)
        Get range for capture volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getrange
N/A int snd_mixer_selem_get_enum_item ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,unsigned int * itemp)
        get the current selected enumerated item for the given mixer simple element
          **** NOT AVAILABLE/USED snd_mixer_selem_get_enum_item ****
N/A int snd_mixer_selem_get_enum_item_name ( snd_mixer_elem_t * elem,unsigned int item,size_t maxlen,char * buf)
        get the enumerated item string for the given mixer simple element
          **** NOT AVAILABLE/USED snd_mixer_selem_get_enum_item_name ****
N/A int snd_mixer_selem_get_enum_items ( snd_mixer_elem_t * elem )
        Return the number of enumerated items of the given mixer simple element.
          **** NOT AVAILABLE/USED snd_mixer_selem_get_enum_items ****
N/A void snd_mixer_selem_get_id ( snd_mixer_elem_t * elem,snd_mixer_selem_id_t * id)
        Get mixer simple element identifier.
          **** NOT AVAILABLE/USED snd_mixer_selem_get_id ****
2   unsigned int snd_mixer_selem_get_index ( snd_mixer_elem_t * elem )
        Get index part of mixer simple element identifier.
          => Used in    :    alsamixer.c: pyalsamixer_list
          => Used in    :    alsamixer.c: pyalsamixerelement_getindex
2   const char* snd_mixer_selem_get_name ( snd_mixer_elem_t * elem )
        Get name part of mixer simple element identifier.
          => Used in    :    alsamixer.c: pyalsamixer_list
          => Used in    :    alsamixer.c: pyalsamixerelement_getname
1   int snd_mixer_selem_get_playback_dB ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long * value)
        Return value of playback volume in dB control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumedb
1   int snd_mixer_selem_get_playback_dB_range ( snd_mixer_elem_t * elem,long * min,long * max)
        Get range in dB for playback volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getrangedb
3   int snd_mixer_selem_get_playback_switch ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,int * value)
        Return value of playback switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
5   int snd_mixer_selem_get_playback_volume ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long * value)
        Return value of playback volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
1   int snd_mixer_selem_get_playback_volume_range ( snd_mixer_elem_t * elem,long * min,long * max)
        Get range for playback volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_getrange
4   int snd_mixer_selem_has_capture_channel ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel)
        Get info about channels of capture stream of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_haschannel
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
1   int snd_mixer_selem_has_capture_switch ( snd_mixer_elem_t * elem )
        Return info about capture switch control existence of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasswitch
1   int snd_mixer_selem_has_capture_switch_exclusive ( snd_mixer_elem_t * elem )
        Return info about capture switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
1   int snd_mixer_selem_has_capture_switch_joined ( snd_mixer_elem_t * elem )
        Return info about capture switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasswitch
1   int snd_mixer_selem_has_capture_volume ( snd_mixer_elem_t * elem )
        Return info about capture volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasvolume
1   int snd_mixer_selem_has_capture_volume_joined ( snd_mixer_elem_t * elem )
        Return info about capture volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasvolume
1   int snd_mixer_selem_has_common_switch ( snd_mixer_elem_t * elem )
        Return true if mixer simple element has only one switch control for both playback and capture.
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
1   int snd_mixer_selem_has_common_volume ( snd_mixer_elem_t * elem )
        Return true if mixer simple element has only one volume control for both playback and capture.
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
4   int snd_mixer_selem_has_playback_channel ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel)
        Get info about channels of playback stream of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_haschannel
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
1   int snd_mixer_selem_has_playback_switch ( snd_mixer_elem_t * elem )
        Return info about playback switch control existence of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasswitch
1   int snd_mixer_selem_has_playback_switch_joined ( snd_mixer_elem_t * elem )
        Return info about playback switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasswitch
1   int snd_mixer_selem_has_playback_volume ( snd_mixer_elem_t * elem )
        Return info about playback volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasvolume
1   int snd_mixer_selem_has_playback_volume_joined ( snd_mixer_elem_t * elem )
        Return info about playback volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_hasvolume
N/A void snd_mixer_selem_id_copy ( snd_mixer_selem_id_t * dst,const snd_mixer_selem_id_t * src)
        copy one snd_mixer_selem_id_t to another
          **** NOT AVAILABLE/USED snd_mixer_selem_id_copy ****
N/A void snd_mixer_selem_id_free ( snd_mixer_selem_id_t * obj )
        frees a previously allocated snd_mixer_selem_id_t
          **** NOT AVAILABLE/USED snd_mixer_selem_id_free ****
N/A unsigned int snd_mixer_selem_id_get_index ( const snd_mixer_selem_id_t * obj )
        Get index part of a mixer simple element identifier.
          **** NOT AVAILABLE/USED snd_mixer_selem_id_get_index ****
N/A const char* snd_mixer_selem_id_get_name ( const snd_mixer_selem_id_t * obj )
        Get name part of a mixer simple element identifier.
          **** NOT AVAILABLE/USED snd_mixer_selem_id_get_name ****
N/A int snd_mixer_selem_id_malloc ( snd_mixer_selem_id_t ** ptr )
        allocate an invalid snd_mixer_selem_id_t using standard malloc
          **** NOT AVAILABLE/USED snd_mixer_selem_id_malloc ****
1   void snd_mixer_selem_id_set_index ( snd_mixer_selem_id_t * obj,unsigned int val)
        Set index part of a mixer simple element identifier.
          => Used in    :    alsamixer.c: pyalsamixerelement_init
1   void snd_mixer_selem_id_set_name ( snd_mixer_selem_id_t * obj,const char * val)
        Set name part of a mixer simple element identifier.
          => Used in    :    alsamixer.c: pyalsamixerelement_init
N/A size_t snd_mixer_selem_id_sizeof ( void )
        get size of snd_mixer_selem_id_t
          **** NOT AVAILABLE/USED snd_mixer_selem_id_sizeof ****
1   int snd_mixer_selem_is_active ( snd_mixer_elem_t * elem )
        Get info about the active state of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
4   int snd_mixer_selem_is_capture_mono ( snd_mixer_elem_t * elem )
        Get info about channels of capture stream of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_ismono
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
N/A int snd_mixer_selem_is_enum_capture ( snd_mixer_elem_t * elem )
        Return true if mixer simple enumerated element belongs to the capture direction.
          **** NOT AVAILABLE/USED snd_mixer_selem_is_enum_capture ****
N/A int snd_mixer_selem_is_enum_playback ( snd_mixer_elem_t * elem )
        Return true if mixer simple enumerated element belongs to the playback direction.
          **** NOT AVAILABLE/USED snd_mixer_selem_is_enum_playback ****
1   int snd_mixer_selem_is_enumerated ( snd_mixer_elem_t * elem )
        Return true if mixer simple element is an enumerated control.
          => Used in    :    alsamixer.c: pyalsamixerelement_dealloc
4   int snd_mixer_selem_is_playback_mono ( snd_mixer_elem_t * elem )
        Get info about channels of playback stream of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_ismono
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_getvolumearray
          => Used in    :    alsamixer.c: pyalsamixerelement_getswitchtuple
1   int snd_mixer_selem_register ( snd_mixer_t * mixer,struct snd_mixer_selem_regopt * options,snd_mixer_class_t ** classp)
        Register mixer simple element class.
          => Used in    :    alsamixer.c: pyalsamixer_attach
1   int snd_mixer_selem_set_capture_dB ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long value,int dir)
        Set value in dB of capture volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumedb
1   int snd_mixer_selem_set_capture_dB_all ( snd_mixer_elem_t * elem,long value,int dir)
        Set value in dB of capture volume control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumealldb
2   int snd_mixer_selem_set_capture_switch ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,int value)
        Set value of capture switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchtuple
1   int snd_mixer_selem_set_capture_switch_all ( snd_mixer_elem_t * elem,int value)
        Set value of capture switch control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchall
3   int snd_mixer_selem_set_capture_volume ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long value)
        Set value of capture volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
1   int snd_mixer_selem_set_capture_volume_all ( snd_mixer_elem_t * elem,long value)
        Set value of capture volume control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumeall
1   int snd_mixer_selem_set_capture_volume_range ( snd_mixer_elem_t * elem,long min,long max)
        Set range for capture volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setrange
N/A int snd_mixer_selem_set_enum_item ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,unsigned int item)
        set the current selected enumerated item for the given mixer simple element
          **** NOT AVAILABLE/USED snd_mixer_selem_set_enum_item ****
1   int snd_mixer_selem_set_playback_dB ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long value,int dir)
        Set value in dB of playback volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumedb
1   int snd_mixer_selem_set_playback_dB_all ( snd_mixer_elem_t * elem,long value,int dir)
        Set value in dB of playback volume control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumealldb
2   int snd_mixer_selem_set_playback_switch ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,int value)
        Set value of playback switch control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitch
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchtuple
1   int snd_mixer_selem_set_playback_switch_all ( snd_mixer_elem_t * elem,int value)
        Set value of playback switch control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setswitchall
3   int snd_mixer_selem_set_playback_volume ( snd_mixer_elem_t * elem,snd_mixer_selem_channel_id_t channel,long value)
        Set value of playback volume control of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolume
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumetuple
1   int snd_mixer_selem_set_playback_volume_all ( snd_mixer_elem_t * elem,long value)
        Set value of playback volume control for all channels of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setvolumeall
1   int snd_mixer_selem_set_playback_volume_range ( snd_mixer_elem_t * elem,long min,long max)
        Set range for playback volume of a mixer simple element.
          => Used in    :    alsamixer.c: pyalsamixerelement_setrange
STAT Simple Mixer Interface         Functions   :  13 missing ( 21%)   0 excluded (  0%) of  62 total ( 79% covered).



STAT Simple Mixer Interface         SUMMARY     :  14 missing ( 18%)   0 excluded (  0%) of  78 total ( 82% covered).





------------------------------------------------------------------------
Generated for ALSA project by alsa-python-coverage.py 1.0
Sat Mar  8 01:30:07 2008 UTC (amartoq@amartoq-laptop 3.326 seconds).


